{"ast":null,"code":"import defaultSource from \"./defaultSource.js\";\nimport normal from \"./normal.js\";\nexport default (function sourceRandomGamma(source) {\n  var randomNormal = normal.source(source)();\n\n  function randomGamma(k, theta) {\n    if ((k = +k) < 0) throw new RangeError(\"invalid k\"); // degenerate distribution if k === 0\n\n    if (k === 0) return function () {\n      return 0;\n    };\n    theta = theta == null ? 1 : +theta; // exponential distribution if k === 1\n\n    if (k === 1) return function () {\n      return -Math.log1p(-source()) * theta;\n    };\n    var d = (k < 1 ? k + 1 : k) - 1 / 3,\n        c = 1 / (3 * Math.sqrt(d)),\n        multiplier = k < 1 ? function () {\n      return Math.pow(source(), 1 / k);\n    } : function () {\n      return 1;\n    };\n    return function () {\n      do {\n        do {\n          var x = randomNormal(),\n              v = 1 + c * x;\n        } while (v <= 0);\n\n        v *= v * v;\n        var u = 1 - source();\n      } while (u >= 1 - 0.0331 * x * x * x * x && Math.log(u) >= 0.5 * x * x + d * (1 - v + Math.log(v)));\n\n      return d * v * multiplier() * theta;\n    };\n  }\n\n  randomGamma.source = sourceRandomGamma;\n  return randomGamma;\n})(defaultSource);","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-package/node_modules/d3-random/src/gamma.js"],"names":["defaultSource","normal","sourceRandomGamma","source","randomNormal","randomGamma","k","theta","RangeError","Math","log1p","d","c","sqrt","multiplier","pow","x","v","u","log"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,eAAe,CAAC,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AACjD,MAAIC,YAAY,GAAGH,MAAM,CAACE,MAAP,CAAcA,MAAd,GAAnB;;AAEA,WAASE,WAAT,CAAqBC,CAArB,EAAwBC,KAAxB,EAA+B;AAC7B,QAAI,CAACD,CAAC,GAAG,CAACA,CAAN,IAAW,CAAf,EAAkB,MAAM,IAAIE,UAAJ,CAAe,WAAf,CAAN,CADW,CAE7B;;AACA,QAAIF,CAAC,KAAK,CAAV,EAAa,OAAO;AAAA,aAAM,CAAN;AAAA,KAAP;AACbC,IAAAA,KAAK,GAAGA,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoB,CAACA,KAA7B,CAJ6B,CAK7B;;AACA,QAAID,CAAC,KAAK,CAAV,EAAa,OAAO;AAAA,aAAM,CAACG,IAAI,CAACC,KAAL,CAAW,CAACP,MAAM,EAAlB,CAAD,GAAyBI,KAA/B;AAAA,KAAP;AAEb,QAAII,CAAC,GAAG,CAACL,CAAC,GAAG,CAAJ,GAAQA,CAAC,GAAG,CAAZ,GAAgBA,CAAjB,IAAsB,IAAI,CAAlC;AAAA,QACIM,CAAC,GAAG,KAAK,IAAIH,IAAI,CAACI,IAAL,CAAUF,CAAV,CAAT,CADR;AAAA,QAEIG,UAAU,GAAGR,CAAC,GAAG,CAAJ,GAAQ;AAAA,aAAMG,IAAI,CAACM,GAAL,CAASZ,MAAM,EAAf,EAAmB,IAAIG,CAAvB,CAAN;AAAA,KAAR,GAA0C;AAAA,aAAM,CAAN;AAAA,KAF3D;AAGA,WAAO,YAAW;AAChB,SAAG;AACD,WAAG;AACD,cAAIU,CAAC,GAAGZ,YAAY,EAApB;AAAA,cACIa,CAAC,GAAG,IAAIL,CAAC,GAAGI,CADhB;AAED,SAHD,QAGSC,CAAC,IAAI,CAHd;;AAIAA,QAAAA,CAAC,IAAIA,CAAC,GAAGA,CAAT;AACA,YAAIC,CAAC,GAAG,IAAIf,MAAM,EAAlB;AACD,OAPD,QAOSe,CAAC,IAAI,IAAI,SAASF,CAAT,GAAaA,CAAb,GAAiBA,CAAjB,GAAqBA,CAA9B,IAAmCP,IAAI,CAACU,GAAL,CAASD,CAAT,KAAe,MAAMF,CAAN,GAAUA,CAAV,GAAcL,CAAC,IAAI,IAAIM,CAAJ,GAAQR,IAAI,CAACU,GAAL,CAASF,CAAT,CAAZ,CAP1E;;AAQA,aAAON,CAAC,GAAGM,CAAJ,GAAQH,UAAU,EAAlB,GAAuBP,KAA9B;AACD,KAVD;AAWD;;AAEDF,EAAAA,WAAW,CAACF,MAAZ,GAAqBD,iBAArB;AAEA,SAAOG,WAAP;AACD,CA9Bc,EA8BZL,aA9BY,CAAf","sourcesContent":["import defaultSource from \"./defaultSource.js\";\nimport normal from \"./normal.js\";\n\nexport default (function sourceRandomGamma(source) {\n  var randomNormal = normal.source(source)();\n\n  function randomGamma(k, theta) {\n    if ((k = +k) < 0) throw new RangeError(\"invalid k\");\n    // degenerate distribution if k === 0\n    if (k === 0) return () => 0;\n    theta = theta == null ? 1 : +theta;\n    // exponential distribution if k === 1\n    if (k === 1) return () => -Math.log1p(-source()) * theta;\n\n    var d = (k < 1 ? k + 1 : k) - 1 / 3,\n        c = 1 / (3 * Math.sqrt(d)),\n        multiplier = k < 1 ? () => Math.pow(source(), 1 / k) : () => 1;\n    return function() {\n      do {\n        do {\n          var x = randomNormal(),\n              v = 1 + c * x;\n        } while (v <= 0);\n        v *= v * v;\n        var u = 1 - source();\n      } while (u >= 1 - 0.0331 * x * x * x * x && Math.log(u) >= 0.5 * x * x + d * (1 - v + Math.log(v)));\n      return d * v * multiplier() * theta;\n    };\n  }\n\n  randomGamma.source = sourceRandomGamma;\n\n  return randomGamma;\n})(defaultSource);\n"]},"metadata":{},"sourceType":"module"}