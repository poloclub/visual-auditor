{"ast":null,"code":"var _jsxFileName = \"/Users/davidmunechika/Documents/Code/visual-auditor/src/components/Main/BarPlot.js\",\n    _s = $RefreshSig$();\n\nimport { useD3 } from '../../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BarPlot() {\n  _s();\n\n  const ref = useD3(svg => {\n    // set the dimensions and margins of the graph\n    const height = 500;\n    const width = 500;\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 30,\n      left: 40\n    }; // append the svg object to the body of the page\n    // svg = d3\n    //   .select('#my_dataviz')\n    //   .append('svg')\n    //   .attr('width', width + margin.left + margin.right)\n    //   .attr('height', height + margin.top + margin.bottom)\n    //   .append('g')\n    //   .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n    // Parse the Data\n\n    const dataCSV = d3.csv('https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/7_OneCatOneNum_header.csv');\n    dataCSV.then(function (data) {\n      // X axis\n      const x = d3.scaleBand().range([0, width]).domain(data.map(function (d) {\n        return d.Country;\n      })).padding(0.1); // Y axis\n\n      const y = d3.scaleLinear().domain([0, 13000]).range([height, 0]);\n      svg.append('g').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)).selectAll('text').attr('transform', 'translate(-10,0)rotate(-45)').style('text-anchor', 'end');\n      svg.append('g').call(d3.axisLeft(y));\n      svg.select('.x-axis').call(d3.axisBottom(x));\n      svg.select('.y-axis').call(d3.axisLeft(y)); // Bars\n\n      svg.select('.plot-area').attr('fill', 'steelblue').selectAll('.bar').data(data).enter().join('rect').attr('x', function (d) {\n        return x(d.Country);\n      }).attr('y', function (d) {\n        return y(d.Value);\n      }).attr('width', x.bandwidth()).attr('height', function (d) {\n        return height - y(d.Value);\n      }).attr('fill', '#2876D1');\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: ref,\n    style: {\n      height: 500,\n      width: '50%',\n      margin: 'auto',\n      display: 'block'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"plot-area\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"x-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      className: \"y-axis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BarPlot, \"r127xTdrGuIqcYXTmMbvPxoKAyo=\", false, function () {\n  return [useD3];\n});\n\n_c = BarPlot;\nexport default BarPlot;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarPlot\");","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/visual-auditor/src/components/Main/BarPlot.js"],"names":["useD3","React","d3","BarPlot","ref","svg","height","width","margin","top","right","bottom","left","dataCSV","csv","then","data","x","scaleBand","range","domain","map","d","Country","padding","y","scaleLinear","append","attr","call","axisBottom","selectAll","style","axisLeft","select","enter","join","Value","bandwidth","display"],"mappings":"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","sourcesContent":["import { useD3 } from '../../hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction BarPlot() {\n  const ref = useD3((svg) => {\n    // set the dimensions and margins of the graph\n    const height = 500;\n    const width = 500;\n    const margin = { top: 20, right: 30, bottom: 30, left: 40 };\n\n    // append the svg object to the body of the page\n    // svg = d3\n    //   .select('#my_dataviz')\n    //   .append('svg')\n    //   .attr('width', width + margin.left + margin.right)\n    //   .attr('height', height + margin.top + margin.bottom)\n    //   .append('g')\n    //   .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    // Parse the Data\n    const dataCSV = d3.csv(\n      'https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/7_OneCatOneNum_header.csv'\n    );\n\n    dataCSV.then(function (data) {\n      // X axis\n      const x = d3\n        .scaleBand()\n        .range([0, width])\n        .domain(\n          data.map(function (d) {\n            return d.Country;\n          })\n        )\n        .padding(0.1);\n\n      // Y axis\n      const y = d3.scaleLinear().domain([0, 13000]).range([height, 0]);\n\n      svg\n        .append('g')\n        .attr('transform', 'translate(0,' + height + ')')\n        .call(d3.axisBottom(x))\n        .selectAll('text')\n        .attr('transform', 'translate(-10,0)rotate(-45)')\n        .style('text-anchor', 'end');\n      svg.append('g').call(d3.axisLeft(y));\n\n      svg.select('.x-axis').call(d3.axisBottom(x));\n      svg.select('.y-axis').call(d3.axisLeft(y));\n\n      // Bars\n      svg\n        .select('.plot-area')\n        .attr('fill', 'steelblue')\n        .selectAll('.bar')\n        .data(data)\n        .enter()\n        .join('rect')\n        .attr('x', function (d) {\n          return x(d.Country);\n        })\n        .attr('y', function (d) {\n          return y(d.Value);\n        })\n        .attr('width', x.bandwidth())\n        .attr('height', function (d) {\n          return height - y(d.Value);\n        })\n        .attr('fill', '#2876D1');\n    });\n  }, []);\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: '50%',\n        margin: 'auto',\n        display: 'block',\n      }}\n    >\n      <g className='plot-area' />\n      <g className='x-axis' />\n      <g className='y-axis' />\n    </svg>\n  );\n}\n\nexport default BarPlot;\n"]},"metadata":{},"sourceType":"module"}