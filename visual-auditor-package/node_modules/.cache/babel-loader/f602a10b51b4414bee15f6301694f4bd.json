{"ast":null,"code":"import _regeneratorRuntime from \"/Users/davidmunechika/Documents/Code/Research/visual-auditor/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(_callee);\n\nexport default function _callee() {\n  var groups, j, m, group, i, n, node;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          groups = this._groups, j = 0, m = groups.length;\n\n        case 1:\n          if (!(j < m)) {\n            _context.next = 13;\n            break;\n          }\n\n          group = groups[j], i = 0, n = group.length;\n\n        case 3:\n          if (!(i < n)) {\n            _context.next = 10;\n            break;\n          }\n\n          if (!(node = group[i])) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 7;\n          return node;\n\n        case 7:\n          ++i;\n          _context.next = 3;\n          break;\n\n        case 10:\n          ++j;\n          _context.next = 1;\n          break;\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/node_modules/d3-selection/src/selection/iterator.js"],"names":["groups","_groups","j","m","length","group","i","n","node"],"mappings":";;;;AAAA,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACJA,UAAAA,MADI,GACK,KAAKC,OADV,EACmBC,CADnB,GACuB,CADvB,EAC0BC,CAD1B,GAC8BH,MAAM,CAACI,MADrC;;AAAA;AAAA,gBAC6CF,CAAC,GAAGC,CADjD;AAAA;AAAA;AAAA;;AAEFE,UAAAA,KAFE,GAEML,MAAM,CAACE,CAAD,CAFZ,EAEiBI,CAFjB,GAEqB,CAFrB,EAEwBC,CAFxB,GAE4BF,KAAK,CAACD,MAFlC;;AAAA;AAAA,gBAEgDE,CAAC,GAAGC,CAFpD;AAAA;AAAA;AAAA;;AAAA,gBAGLC,IAAI,GAAGH,KAAK,CAACC,CAAD,CAHP;AAAA;AAAA;AAAA;;AAAA;AAGY,iBAAME,IAAN;;AAHZ;AAEuD,YAAEF,CAFzD;AAAA;AAAA;;AAAA;AACoD,YAAEJ,CADtD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["export default function*() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) yield node;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}