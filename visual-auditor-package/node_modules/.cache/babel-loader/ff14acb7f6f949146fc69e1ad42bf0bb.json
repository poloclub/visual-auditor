{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/davidmunechika/Documents/Code/visual-auditor/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport ascending from \"./ascending.js\";\nimport maxIndex from \"./maxIndex.js\";\nexport default function greatestIndex(values) {\n  var compare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ascending;\n  if (compare.length === 1) return maxIndex(values, compare);\n  var maxValue;\n  var max = -1;\n  var index = -1;\n\n  var _iterator = _createForOfIteratorHelper(values),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      ++index;\n\n      if (max < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {\n        maxValue = value;\n        max = index;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return max;\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/visual-auditor/node_modules/d3-array/src/greatestIndex.js"],"names":["ascending","maxIndex","greatestIndex","values","compare","length","maxValue","max","index","value"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,eAAe,SAASC,aAAT,CAAuBC,MAAvB,EAAoD;AAAA,MAArBC,OAAqB,uEAAXJ,SAAW;AACjE,MAAII,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B,OAAOJ,QAAQ,CAACE,MAAD,EAASC,OAAT,CAAf;AAC1B,MAAIE,QAAJ;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAJiE,6CAK7CL,MAL6C;AAAA;;AAAA;AAKjE,wDAA4B;AAAA,UAAjBM,KAAiB;AAC1B,QAAED,KAAF;;AACA,UAAID,GAAG,GAAG,CAAN,GACEH,OAAO,CAACK,KAAD,EAAQA,KAAR,CAAP,KAA0B,CAD5B,GAEEL,OAAO,CAACK,KAAD,EAAQH,QAAR,CAAP,GAA2B,CAFjC,EAEoC;AAClCA,QAAAA,QAAQ,GAAGG,KAAX;AACAF,QAAAA,GAAG,GAAGC,KAAN;AACD;AACF;AAbgE;AAAA;AAAA;AAAA;AAAA;;AAcjE,SAAOD,GAAP;AACD","sourcesContent":["import ascending from \"./ascending.js\";\nimport maxIndex from \"./maxIndex.js\";\n\nexport default function greatestIndex(values, compare = ascending) {\n  if (compare.length === 1) return maxIndex(values, compare);\n  let maxValue;\n  let max = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (max < 0\n        ? compare(value, value) === 0\n        : compare(value, maxValue) > 0) {\n      maxValue = value;\n      max = index;\n    }\n  }\n  return max;\n}\n"]},"metadata":{},"sourceType":"module"}