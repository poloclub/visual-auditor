{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-package/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport ascending from \"./ascending.js\";\nimport minIndex from \"./minIndex.js\";\nexport default function leastIndex(values) {\n  var compare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ascending;\n  if (compare.length === 1) return minIndex(values, compare);\n  var minValue;\n  var min = -1;\n  var index = -1;\n\n  var _iterator = _createForOfIteratorHelper(values),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      ++index;\n\n      if (min < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {\n        minValue = value;\n        min = index;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return min;\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-package/node_modules/d3-array/src/leastIndex.js"],"names":["ascending","minIndex","leastIndex","values","compare","length","minValue","min","index","value"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAAiD;AAAA,MAArBC,OAAqB,uEAAXJ,SAAW;AAC9D,MAAII,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B,OAAOJ,QAAQ,CAACE,MAAD,EAASC,OAAT,CAAf;AAC1B,MAAIE,QAAJ;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AAJ8D,6CAK1CL,MAL0C;AAAA;;AAAA;AAK9D,wDAA4B;AAAA,UAAjBM,KAAiB;AAC1B,QAAED,KAAF;;AACA,UAAID,GAAG,GAAG,CAAN,GACEH,OAAO,CAACK,KAAD,EAAQA,KAAR,CAAP,KAA0B,CAD5B,GAEEL,OAAO,CAACK,KAAD,EAAQH,QAAR,CAAP,GAA2B,CAFjC,EAEoC;AAClCA,QAAAA,QAAQ,GAAGG,KAAX;AACAF,QAAAA,GAAG,GAAGC,KAAN;AACD;AACF;AAb6D;AAAA;AAAA;AAAA;AAAA;;AAc9D,SAAOD,GAAP;AACD","sourcesContent":["import ascending from \"./ascending.js\";\nimport minIndex from \"./minIndex.js\";\n\nexport default function leastIndex(values, compare = ascending) {\n  if (compare.length === 1) return minIndex(values, compare);\n  let minValue;\n  let min = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (min < 0\n        ? compare(value, value) === 0\n        : compare(value, minValue) < 0) {\n      minValue = value;\n      min = index;\n    }\n  }\n  return min;\n}\n"]},"metadata":{},"sourceType":"module"}