{"ast":null,"code":"import ascending from \"./ascending.js\";\nimport permute from \"./permute.js\";\nexport default function sort(values, ...F) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n  let [f] = F;\n\n  if (f && f.length !== 2 || F.length > 1) {\n    const index = Uint32Array.from(values, (d, i) => i);\n\n    if (F.length > 1) {\n      F = F.map(f => values.map(f));\n      index.sort((i, j) => {\n        for (const f of F) {\n          const c = ascendingDefined(f[i], f[j]);\n          if (c) return c;\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort((i, j) => ascendingDefined(f[i], f[j]));\n    }\n\n    return permute(values, index);\n  }\n\n  return values.sort(compareDefined(f));\n}\nexport function compareDefined(compare = ascending) {\n  if (compare === ascending) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return (a, b) => {\n    const x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\nexport function ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/node_modules/d3-array/src/sort.js"],"names":["ascending","permute","sort","values","F","Symbol","iterator","TypeError","Array","from","f","length","index","Uint32Array","d","i","map","j","c","ascendingDefined","compareDefined","compare","a","b","x"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,eAAe,SAASC,IAAT,CAAcC,MAAd,EAAsB,GAAGC,CAAzB,EAA4B;AACzC,MAAI,OAAOD,MAAM,CAACE,MAAM,CAACC,QAAR,CAAb,KAAmC,UAAvC,EAAmD,MAAM,IAAIC,SAAJ,CAAc,wBAAd,CAAN;AACnDJ,EAAAA,MAAM,GAAGK,KAAK,CAACC,IAAN,CAAWN,MAAX,CAAT;AACA,MAAI,CAACO,CAAD,IAAMN,CAAV;;AACA,MAAKM,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAa,CAAnB,IAAyBP,CAAC,CAACO,MAAF,GAAW,CAAxC,EAA2C;AACzC,UAAMC,KAAK,GAAGC,WAAW,CAACJ,IAAZ,CAAiBN,MAAjB,EAAyB,CAACW,CAAD,EAAIC,CAAJ,KAAUA,CAAnC,CAAd;;AACA,QAAIX,CAAC,CAACO,MAAF,GAAW,CAAf,EAAkB;AAChBP,MAAAA,CAAC,GAAGA,CAAC,CAACY,GAAF,CAAMN,CAAC,IAAIP,MAAM,CAACa,GAAP,CAAWN,CAAX,CAAX,CAAJ;AACAE,MAAAA,KAAK,CAACV,IAAN,CAAW,CAACa,CAAD,EAAIE,CAAJ,KAAU;AACnB,aAAK,MAAMP,CAAX,IAAgBN,CAAhB,EAAmB;AACjB,gBAAMc,CAAC,GAAGC,gBAAgB,CAACT,CAAC,CAACK,CAAD,CAAF,EAAOL,CAAC,CAACO,CAAD,CAAR,CAA1B;AACA,cAAIC,CAAJ,EAAO,OAAOA,CAAP;AACR;AACF,OALD;AAMD,KARD,MAQO;AACLR,MAAAA,CAAC,GAAGP,MAAM,CAACa,GAAP,CAAWN,CAAX,CAAJ;AACAE,MAAAA,KAAK,CAACV,IAAN,CAAW,CAACa,CAAD,EAAIE,CAAJ,KAAUE,gBAAgB,CAACT,CAAC,CAACK,CAAD,CAAF,EAAOL,CAAC,CAACO,CAAD,CAAR,CAArC;AACD;;AACD,WAAOhB,OAAO,CAACE,MAAD,EAASS,KAAT,CAAd;AACD;;AACD,SAAOT,MAAM,CAACD,IAAP,CAAYkB,cAAc,CAACV,CAAD,CAA1B,CAAP;AACD;AAED,OAAO,SAASU,cAAT,CAAwBC,OAAO,GAAGrB,SAAlC,EAA6C;AAClD,MAAIqB,OAAO,KAAKrB,SAAhB,EAA2B,OAAOmB,gBAAP;AAC3B,MAAI,OAAOE,OAAP,KAAmB,UAAvB,EAAmC,MAAM,IAAId,SAAJ,CAAc,2BAAd,CAAN;AACnC,SAAO,CAACe,CAAD,EAAIC,CAAJ,KAAU;AACf,UAAMC,CAAC,GAAGH,OAAO,CAACC,CAAD,EAAIC,CAAJ,CAAjB;AACA,QAAIC,CAAC,IAAIA,CAAC,KAAK,CAAf,EAAkB,OAAOA,CAAP;AAClB,WAAO,CAACH,OAAO,CAACE,CAAD,EAAIA,CAAJ,CAAP,KAAkB,CAAnB,KAAyBF,OAAO,CAACC,CAAD,EAAIA,CAAJ,CAAP,KAAkB,CAA3C,CAAP;AACD,GAJD;AAKD;AAED,OAAO,SAASH,gBAAT,CAA0BG,CAA1B,EAA6BC,CAA7B,EAAgC;AACrC,SAAO,CAACD,CAAC,IAAI,IAAL,IAAa,EAAEA,CAAC,IAAIA,CAAP,CAAd,KAA4BC,CAAC,IAAI,IAAL,IAAa,EAAEA,CAAC,IAAIA,CAAP,CAAzC,MAAwDD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAjF,CAAP;AACD","sourcesContent":["import ascending from \"./ascending.js\";\nimport permute from \"./permute.js\";\n\nexport default function sort(values, ...F) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n  let [f] = F;\n  if ((f && f.length !== 2) || F.length > 1) {\n    const index = Uint32Array.from(values, (d, i) => i);\n    if (F.length > 1) {\n      F = F.map(f => values.map(f));\n      index.sort((i, j) => {\n        for (const f of F) {\n          const c = ascendingDefined(f[i], f[j]);\n          if (c) return c;\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort((i, j) => ascendingDefined(f[i], f[j]));\n    }\n    return permute(values, index);\n  }\n  return values.sort(compareDefined(f));\n}\n\nexport function compareDefined(compare = ascending) {\n  if (compare === ascending) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return (a, b) => {\n    const x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\n\nexport function ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}\n"]},"metadata":{},"sourceType":"module"}