{"ast":null,"code":"var _jsxFileName = \"/Users/davidmunechika/Documents/Code/visual-auditor/src/components/Main/Main.js\";\nimport React from 'react';\nimport SliceBarChart from './SliceBarChart';\nimport './Main.css';\nimport logloss from '../../data/logloss.json';\nimport accuracy from '../../data/accuracy.json';\nimport precision from '../../data/precision.json';\nimport reverselogloss from '../../data/reverselogloss.json';\nimport ForceLayout from './ForceLayout';\nimport GraphLayout from './GraphLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = ({\n  numFeatures,\n  sampleSize,\n  metric,\n  view,\n  sortBy,\n  overperforming\n}) => {\n  let data;\n  let modelMetric;\n\n  if (overperforming) {\n    switch (metric) {\n      case 'Log Loss':\n        data = Object.values(reverselogloss['data']).map(obj => Object.values(obj)[0]);\n        data.forEach(d => d.metric = Math.abs(d.metric));\n        console.log(data);\n        modelMetric = reverselogloss['model'];\n        break;\n\n      case 'Accuracy':\n        data = Object.values(accuracy['data']).map(obj => Object.values(obj)[0]);\n        modelMetric = accuracy['model'];\n        break;\n\n      case 'Precision':\n        data = Object.values(precision['data']).map(obj => Object.values(obj)[0]);\n        modelMetric = precision['model'];\n        break;\n\n      default:\n        data = Object.values(reverselogloss['data']).map(obj => Object.values(obj)[0]);\n        modelMetric = reverselogloss['model'];\n    }\n  } else {\n    switch (metric) {\n      case 'Log Loss':\n        data = Object.values(logloss['data']).map(obj => Object.values(obj)[0]);\n        modelMetric = logloss['model'];\n        break;\n\n      case 'Accuracy':\n        data = Object.values(accuracy['data']).map(obj => Object.values(obj)[0]);\n        modelMetric = accuracy['model'];\n        break;\n\n      case 'Precision':\n        data = Object.values(precision['data']).map(obj => Object.values(obj)[0]);\n        modelMetric = precision['model'];\n        break;\n\n      default:\n        data = Object.values(logloss['data']).map(obj => Object.values(obj)[0]);\n        modelMetric = logloss['model'];\n    }\n  }\n\n  const metricArray = data.map(obj => obj.metric);\n  const sizeArray = data.map(obj => obj.size);\n  const max = Math.max(...metricArray);\n  const sizeMax = Math.max(...sizeArray);\n  let filteredData = data.filter(obj => obj.size >= sampleSize).filter(obj => obj.degree <= numFeatures).sort(function (a, b) {\n    if (sortBy === 'size') return b.size - a.size;\n    return b.metric - a.metric;\n  });\n\n  if (view === 'bar') {\n    filteredData = filteredData.slice(0, 10);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    style: {\n      display: 'block'\n    },\n    children: view === 'bar' ? /*#__PURE__*/_jsxDEV(SliceBarChart, {\n      data: filteredData,\n      model: modelMetric,\n      max: max,\n      view: view\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this) : view === 'force' ? /*#__PURE__*/_jsxDEV(ForceLayout, {\n      data: filteredData,\n      degree: numFeatures,\n      view: view,\n      metric: metric,\n      model: modelMetric\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GraphLayout, {\n      data: filteredData,\n      metric: metric,\n      model: modelMetric\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/visual-auditor/src/components/Main/Main.js"],"names":["React","SliceBarChart","logloss","accuracy","precision","reverselogloss","ForceLayout","GraphLayout","Main","numFeatures","sampleSize","metric","view","sortBy","overperforming","data","modelMetric","Object","values","map","obj","forEach","d","Math","abs","console","log","metricArray","sizeArray","size","max","sizeMax","filteredData","filter","degree","sort","a","b","slice","display"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SliceBarChart from './SliceBarChart';\nimport './Main.css';\nimport logloss from '../../data/logloss.json';\nimport accuracy from '../../data/accuracy.json';\nimport precision from '../../data/precision.json';\nimport reverselogloss from '../../data/reverselogloss.json';\nimport ForceLayout from './ForceLayout';\nimport GraphLayout from './GraphLayout';\n\nconst Main = ({\n  numFeatures,\n  sampleSize,\n  metric,\n  view,\n  sortBy,\n  overperforming,\n}) => {\n  let data;\n  let modelMetric;\n  if (overperforming) {\n    switch (metric) {\n      case 'Log Loss':\n        data = Object.values(reverselogloss['data']).map(\n          (obj) => Object.values(obj)[0]\n        );\n        data.forEach((d) => (d.metric = Math.abs(d.metric)));\n        console.log(data);\n        modelMetric = reverselogloss['model'];\n        break;\n      case 'Accuracy':\n        data = Object.values(accuracy['data']).map(\n          (obj) => Object.values(obj)[0]\n        );\n        modelMetric = accuracy['model'];\n        break;\n      case 'Precision':\n        data = Object.values(precision['data']).map(\n          (obj) => Object.values(obj)[0]\n        );\n        modelMetric = precision['model'];\n        break;\n      default:\n        data = Object.values(reverselogloss['data']).map(\n          (obj) => Object.values(obj)[0]\n        );\n        modelMetric = reverselogloss['model'];\n    }\n  } else {\n    switch (metric) {\n      case 'Log Loss':\n        data = Object.values(logloss['data']).map(\n          (obj) => Object.values(obj)[0]\n        );\n        modelMetric = logloss['model'];\n        break;\n      case 'Accuracy':\n        data = Object.values(accuracy['data']).map(\n          (obj) => Object.values(obj)[0]\n        );\n        modelMetric = accuracy['model'];\n        break;\n      case 'Precision':\n        data = Object.values(precision['data']).map(\n          (obj) => Object.values(obj)[0]\n        );\n        modelMetric = precision['model'];\n        break;\n      default:\n        data = Object.values(logloss['data']).map(\n          (obj) => Object.values(obj)[0]\n        );\n        modelMetric = logloss['model'];\n    }\n  }\n  const metricArray = data.map((obj) => obj.metric);\n  const sizeArray = data.map((obj) => obj.size);\n  const max = Math.max(...metricArray);\n  const sizeMax = Math.max(...sizeArray);\n  let filteredData = data\n    .filter((obj) => obj.size >= sampleSize)\n    .filter((obj) => obj.degree <= numFeatures)\n    .sort(function (a, b) {\n      if (sortBy === 'size') return b.size - a.size;\n      return b.metric - a.metric;\n    });\n  if (view === 'bar') {\n    filteredData = filteredData.slice(0, 10);\n  }\n  return (\n    <div className='main-container' style={{ display: 'block' }}>\n      {view === 'bar' ? (\n        <SliceBarChart\n          data={filteredData}\n          model={modelMetric}\n          max={max}\n          view={view}\n        />\n      ) : view === 'force' ? (\n        <ForceLayout\n          data={filteredData}\n          degree={numFeatures}\n          view={view}\n          metric={metric}\n          model={modelMetric}\n        />\n      ) : (\n        <GraphLayout data={filteredData} metric={metric} model={modelMetric} />\n      )}\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}