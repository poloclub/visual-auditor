{"ast":null,"code":"import merge from '../merge';\nimport getThemeValue, { propToStyleFunction } from '../getThemeValue';\nimport { handleBreakpoints, createEmptyBreakpointObject, removeUnusedBreakpoints } from '../breakpoints';\n\nfunction objectsHaveSameKeys(...objects) {\n  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n}\n\nfunction callIfFn(maybeFn, arg) {\n  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;\n}\n\nfunction styleFunctionSx(props) {\n  const {\n    sx: styles,\n    theme = {}\n  } = props || {};\n\n  if (!styles) {\n    return null;\n  }\n\n  if (typeof styles === 'function') {\n    return styles(theme);\n  }\n\n  if (typeof styles !== 'object') {\n    // value\n    return styles;\n  }\n\n  const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);\n  const breakpointsKeys = Object.keys(emptyBreakpoints);\n  let css = emptyBreakpoints;\n  Object.keys(styles).forEach(styleKey => {\n    const value = callIfFn(styles[styleKey], theme);\n\n    if (typeof value === 'object') {\n      if (propToStyleFunction[styleKey]) {\n        css = merge(css, getThemeValue(styleKey, value, theme));\n      } else {\n        const breakpointsValues = handleBreakpoints({\n          theme\n        }, value, x => ({\n          [styleKey]: x\n        }));\n\n        if (objectsHaveSameKeys(breakpointsValues, value)) {\n          css[styleKey] = styleFunctionSx({\n            sx: value,\n            theme\n          });\n        } else {\n          css = merge(css, breakpointsValues);\n        }\n      }\n    } else {\n      css = merge(css, getThemeValue(styleKey, value, theme));\n    }\n  });\n  return removeUnusedBreakpoints(breakpointsKeys, css);\n}\n\nstyleFunctionSx.filterProps = ['sx'];\nexport default styleFunctionSx;","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js"],"names":["merge","getThemeValue","propToStyleFunction","handleBreakpoints","createEmptyBreakpointObject","removeUnusedBreakpoints","objectsHaveSameKeys","objects","allKeys","reduce","keys","object","concat","Object","union","Set","every","size","length","callIfFn","maybeFn","arg","styleFunctionSx","props","sx","styles","theme","emptyBreakpoints","breakpoints","breakpointsKeys","css","forEach","styleKey","value","breakpointsValues","x","filterProps"],"mappings":"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","sourcesContent":["import merge from '../merge';\nimport getThemeValue, { propToStyleFunction } from '../getThemeValue';\nimport { handleBreakpoints, createEmptyBreakpointObject, removeUnusedBreakpoints } from '../breakpoints';\n\nfunction objectsHaveSameKeys(...objects) {\n  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n}\n\nfunction callIfFn(maybeFn, arg) {\n  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;\n}\n\nfunction styleFunctionSx(props) {\n  const {\n    sx: styles,\n    theme = {}\n  } = props || {};\n\n  if (!styles) {\n    return null;\n  }\n\n  if (typeof styles === 'function') {\n    return styles(theme);\n  }\n\n  if (typeof styles !== 'object') {\n    // value\n    return styles;\n  }\n\n  const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);\n  const breakpointsKeys = Object.keys(emptyBreakpoints);\n  let css = emptyBreakpoints;\n  Object.keys(styles).forEach(styleKey => {\n    const value = callIfFn(styles[styleKey], theme);\n\n    if (typeof value === 'object') {\n      if (propToStyleFunction[styleKey]) {\n        css = merge(css, getThemeValue(styleKey, value, theme));\n      } else {\n        const breakpointsValues = handleBreakpoints({\n          theme\n        }, value, x => ({\n          [styleKey]: x\n        }));\n\n        if (objectsHaveSameKeys(breakpointsValues, value)) {\n          css[styleKey] = styleFunctionSx({\n            sx: value,\n            theme\n          });\n        } else {\n          css = merge(css, breakpointsValues);\n        }\n      }\n    } else {\n      css = merge(css, getThemeValue(styleKey, value, theme));\n    }\n  });\n  return removeUnusedBreakpoints(breakpointsKeys, css);\n}\n\nstyleFunctionSx.filterProps = ['sx'];\nexport default styleFunctionSx;"]},"metadata":{},"sourceType":"module"}