{"ast":null,"code":"var _jsxFileName = \"/Users/davidmunechika/Documents/Code/visual-auditor/src/components/Main/Main.js\";\nimport React from 'react';\nimport SliceBarChart from './SliceBarChart';\nimport './Main.css';\nimport logloss from '../../data/logloss.json';\nimport accuracy from '../../data/accuracy.json';\nimport precision from '../../data/precision.json';\nimport ForceLayout from './ForceLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = ({\n  numFeatures,\n  sampleSize,\n  metric\n}) => {\n  let data;\n  let modelMetric;\n\n  switch (metric) {\n    case 'log loss':\n      data = Object.values(logloss['data']).map(obj => Object.values(obj)[0]);\n      modelMetric = logloss['model'];\n      break;\n\n    case 'accuracy':\n      data = Object.values(accuracy['data']).map(obj => Object.values(obj)[0]);\n      modelMetric = accuracy['model'];\n      break;\n\n    case 'precision':\n      data = Object.values(precision['data']).map(obj => Object.values(obj)[0]);\n      modelMetric = precision['model'];\n      break;\n\n    default:\n      data = Object.values(logloss['data']).map(obj => Object.values(obj)[0]);\n      modelMetric = logloss['model'];\n  }\n\n  const metricArray = data.map(obj => obj.metric);\n  const max = Math.max(...metricArray);\n  const filteredData = data.filter(obj => obj.size >= sampleSize).filter(obj => obj.degree <= numFeatures).sort(function (a, b) {\n    return b.metric - a.metric;\n  }).slice(0, 100);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: /*#__PURE__*/_jsxDEV(ForceLayout, {\n      data: filteredData,\n      model: modelMetric,\n      max: max\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/visual-auditor/src/components/Main/Main.js"],"names":["React","SliceBarChart","logloss","accuracy","precision","ForceLayout","Main","numFeatures","sampleSize","metric","data","modelMetric","Object","values","map","obj","metricArray","max","Math","filteredData","filter","size","degree","sort","a","b","slice"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,YAAP;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA;AAA3B,CAAD,KAAyC;AACpD,MAAIC,IAAJ;AACA,MAAIC,WAAJ;;AACA,UAAQF,MAAR;AACE,SAAK,UAAL;AACEC,MAAAA,IAAI,GAAGE,MAAM,CAACC,MAAP,CAAcX,OAAO,CAAC,MAAD,CAArB,EAA+BY,GAA/B,CAAoCC,GAAD,IAASH,MAAM,CAACC,MAAP,CAAcE,GAAd,EAAmB,CAAnB,CAA5C,CAAP;AACAJ,MAAAA,WAAW,GAAGT,OAAO,CAAC,OAAD,CAArB;AACA;;AACF,SAAK,UAAL;AACEQ,MAAAA,IAAI,GAAGE,MAAM,CAACC,MAAP,CAAcV,QAAQ,CAAC,MAAD,CAAtB,EAAgCW,GAAhC,CACJC,GAAD,IAASH,MAAM,CAACC,MAAP,CAAcE,GAAd,EAAmB,CAAnB,CADJ,CAAP;AAGAJ,MAAAA,WAAW,GAAGR,QAAQ,CAAC,OAAD,CAAtB;AACA;;AACF,SAAK,WAAL;AACEO,MAAAA,IAAI,GAAGE,MAAM,CAACC,MAAP,CAAcT,SAAS,CAAC,MAAD,CAAvB,EAAiCU,GAAjC,CACJC,GAAD,IAASH,MAAM,CAACC,MAAP,CAAcE,GAAd,EAAmB,CAAnB,CADJ,CAAP;AAGAJ,MAAAA,WAAW,GAAGP,SAAS,CAAC,OAAD,CAAvB;AACA;;AACF;AACEM,MAAAA,IAAI,GAAGE,MAAM,CAACC,MAAP,CAAcX,OAAO,CAAC,MAAD,CAArB,EAA+BY,GAA/B,CAAoCC,GAAD,IAASH,MAAM,CAACC,MAAP,CAAcE,GAAd,EAAmB,CAAnB,CAA5C,CAAP;AACAJ,MAAAA,WAAW,GAAGT,OAAO,CAAC,OAAD,CAArB;AAnBJ;;AAqBA,QAAMc,WAAW,GAAGN,IAAI,CAACI,GAAL,CAAUC,GAAD,IAASA,GAAG,CAACN,MAAtB,CAApB;AACA,QAAMQ,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGD,WAAZ,CAAZ;AACA,QAAMG,YAAY,GAAGT,IAAI,CACtBU,MADkB,CACVL,GAAD,IAASA,GAAG,CAACM,IAAJ,IAAYb,UADV,EAElBY,MAFkB,CAEVL,GAAD,IAASA,GAAG,CAACO,MAAJ,IAAcf,WAFZ,EAGlBgB,IAHkB,CAGb,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACpB,WAAOA,CAAC,CAAChB,MAAF,GAAWe,CAAC,CAACf,MAApB;AACD,GALkB,EAMlBiB,KANkB,CAMZ,CANY,EAMT,GANS,CAArB;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAEP,YAAnB;AAAiC,MAAA,KAAK,EAAER,WAAxC;AAAqD,MAAA,GAAG,EAAEM;AAA1D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtCD;;KAAMX,I;AAwCN,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport SliceBarChart from './SliceBarChart';\nimport './Main.css';\nimport logloss from '../../data/logloss.json';\nimport accuracy from '../../data/accuracy.json';\nimport precision from '../../data/precision.json';\nimport ForceLayout from './ForceLayout';\n\nconst Main = ({ numFeatures, sampleSize, metric }) => {\n  let data;\n  let modelMetric;\n  switch (metric) {\n    case 'log loss':\n      data = Object.values(logloss['data']).map((obj) => Object.values(obj)[0]);\n      modelMetric = logloss['model'];\n      break;\n    case 'accuracy':\n      data = Object.values(accuracy['data']).map(\n        (obj) => Object.values(obj)[0]\n      );\n      modelMetric = accuracy['model'];\n      break;\n    case 'precision':\n      data = Object.values(precision['data']).map(\n        (obj) => Object.values(obj)[0]\n      );\n      modelMetric = precision['model'];\n      break;\n    default:\n      data = Object.values(logloss['data']).map((obj) => Object.values(obj)[0]);\n      modelMetric = logloss['model'];\n  }\n  const metricArray = data.map((obj) => obj.metric);\n  const max = Math.max(...metricArray);\n  const filteredData = data\n    .filter((obj) => obj.size >= sampleSize)\n    .filter((obj) => obj.degree <= numFeatures)\n    .sort(function (a, b) {\n      return b.metric - a.metric;\n    })\n    .slice(0, 100);\n  return (\n    <div className='main-container'>\n      <ForceLayout data={filteredData} model={modelMetric} max={max} />\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}