{"ast":null,"code":"import _slicedToArray from \"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-package/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-package/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { InternMap } from \"internmap\";\nexport default function mode(values, valueof) {\n  var counts = new InternMap();\n\n  if (valueof === undefined) {\n    var _iterator = _createForOfIteratorHelper(values),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var value = _step.value;\n\n        if (value != null && value >= value) {\n          counts.set(value, (counts.get(value) || 0) + 1);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    var index = -1;\n\n    var _iterator2 = _createForOfIteratorHelper(values),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _value = _step2.value;\n\n        if ((_value = valueof(_value, ++index, values)) != null && _value >= _value) {\n          counts.set(_value, (counts.get(_value) || 0) + 1);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  var modeValue;\n  var modeCount = 0;\n\n  var _iterator3 = _createForOfIteratorHelper(counts),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          _value2 = _step3$value[0],\n          count = _step3$value[1];\n\n      if (count > modeCount) {\n        modeCount = count;\n        modeValue = _value2;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return modeValue;\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-package/node_modules/d3-array/src/mode.js"],"names":["InternMap","mode","values","valueof","counts","undefined","value","set","get","index","modeValue","modeCount","count"],"mappings":";;AAAA,SAAQA,SAAR,QAAwB,WAAxB;AAEA,eAAe,SAASC,IAAT,CAAcC,MAAd,EAAsBC,OAAtB,EAA+B;AAC5C,MAAMC,MAAM,GAAG,IAAIJ,SAAJ,EAAf;;AACA,MAAIG,OAAO,KAAKE,SAAhB,EAA2B;AAAA,+CACPH,MADO;AAAA;;AAAA;AACzB,0DAA0B;AAAA,YAAjBI,KAAiB;;AACxB,YAAIA,KAAK,IAAI,IAAT,IAAiBA,KAAK,IAAIA,KAA9B,EAAqC;AACnCF,UAAAA,MAAM,CAACG,GAAP,CAAWD,KAAX,EAAkB,CAACF,MAAM,CAACI,GAAP,CAAWF,KAAX,KAAqB,CAAtB,IAA2B,CAA7C;AACD;AACF;AALwB;AAAA;AAAA;AAAA;AAAA;AAM1B,GAND,MAMO;AACL,QAAIG,KAAK,GAAG,CAAC,CAAb;;AADK,gDAEaP,MAFb;AAAA;;AAAA;AAEL,6DAA0B;AAAA,YAAjBI,MAAiB;;AACxB,YAAI,CAACA,MAAK,GAAGH,OAAO,CAACG,MAAD,EAAQ,EAAEG,KAAV,EAAiBP,MAAjB,CAAhB,KAA6C,IAA7C,IAAqDI,MAAK,IAAIA,MAAlE,EAAyE;AACvEF,UAAAA,MAAM,CAACG,GAAP,CAAWD,MAAX,EAAkB,CAACF,MAAM,CAACI,GAAP,CAAWF,MAAX,KAAqB,CAAtB,IAA2B,CAA7C;AACD;AACF;AANI;AAAA;AAAA;AAAA;AAAA;AAON;;AACD,MAAII,SAAJ;AACA,MAAIC,SAAS,GAAG,CAAhB;;AAjB4C,8CAkBfP,MAlBe;AAAA;;AAAA;AAkB5C,2DAAqC;AAAA;AAAA,UAAzBE,OAAyB;AAAA,UAAlBM,KAAkB;;AACnC,UAAIA,KAAK,GAAGD,SAAZ,EAAuB;AACrBA,QAAAA,SAAS,GAAGC,KAAZ;AACAF,QAAAA,SAAS,GAAGJ,OAAZ;AACD;AACF;AAvB2C;AAAA;AAAA;AAAA;AAAA;;AAwB5C,SAAOI,SAAP;AACD","sourcesContent":["import {InternMap} from \"internmap\";\n\nexport default function mode(values, valueof) {\n  const counts = new InternMap();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && value >= value) {\n        counts.set(value, (counts.get(value) || 0) + 1);\n      }\n    }\n  }\n  let modeValue;\n  let modeCount = 0;\n  for (const [value, count] of counts) {\n    if (count > modeCount) {\n      modeCount = count;\n      modeValue = value;\n    }\n  }\n  return modeValue;\n}\n"]},"metadata":{},"sourceType":"module"}