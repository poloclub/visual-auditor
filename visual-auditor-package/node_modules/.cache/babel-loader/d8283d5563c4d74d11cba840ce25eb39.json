{"ast":null,"code":"import { linearish } from \"./linear.js\";\nimport number from \"./number.js\";\nexport default function identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function (_) {\n    return arguments.length ? (domain = Array.from(_, number), scale) : domain.slice();\n  };\n\n  scale.unknown = function (_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function () {\n    return identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? Array.from(domain, number) : [0, 1];\n  return linearish(scale);\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-package/node_modules/d3-scale/src/identity.js"],"names":["linearish","number","identity","domain","unknown","scale","x","isNaN","invert","range","_","arguments","length","Array","from","slice","copy"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,eAAe,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACvC,MAAIC,OAAJ;;AAEA,WAASC,KAAT,CAAeC,CAAf,EAAkB;AAChB,WAAOA,CAAC,IAAI,IAAL,IAAaC,KAAK,CAACD,CAAC,GAAG,CAACA,CAAN,CAAlB,GAA6BF,OAA7B,GAAuCE,CAA9C;AACD;;AAEDD,EAAAA,KAAK,CAACG,MAAN,GAAeH,KAAf;;AAEAA,EAAAA,KAAK,CAACF,MAAN,GAAeE,KAAK,CAACI,KAAN,GAAc,UAASC,CAAT,EAAY;AACvC,WAAOC,SAAS,CAACC,MAAV,IAAoBT,MAAM,GAAGU,KAAK,CAACC,IAAN,CAAWJ,CAAX,EAAcT,MAAd,CAAT,EAAgCI,KAApD,IAA6DF,MAAM,CAACY,KAAP,EAApE;AACD,GAFD;;AAIAV,EAAAA,KAAK,CAACD,OAAN,GAAgB,UAASM,CAAT,EAAY;AAC1B,WAAOC,SAAS,CAACC,MAAV,IAAoBR,OAAO,GAAGM,CAAV,EAAaL,KAAjC,IAA0CD,OAAjD;AACD,GAFD;;AAIAC,EAAAA,KAAK,CAACW,IAAN,GAAa,YAAW;AACtB,WAAOd,QAAQ,CAACC,MAAD,CAAR,CAAiBC,OAAjB,CAAyBA,OAAzB,CAAP;AACD,GAFD;;AAIAD,EAAAA,MAAM,GAAGQ,SAAS,CAACC,MAAV,GAAmBC,KAAK,CAACC,IAAN,CAAWX,MAAX,EAAmBF,MAAnB,CAAnB,GAAgD,CAAC,CAAD,EAAI,CAAJ,CAAzD;AAEA,SAAOD,SAAS,CAACK,KAAD,CAAhB;AACD","sourcesContent":["import {linearish} from \"./linear.js\";\nimport number from \"./number.js\";\n\nexport default function identity(domain) {\n  var unknown;\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : x;\n  }\n\n  scale.invert = scale;\n\n  scale.domain = scale.range = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), scale) : domain.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return identity(domain).unknown(unknown);\n  };\n\n  domain = arguments.length ? Array.from(domain, number) : [0, 1];\n\n  return linearish(scale);\n}\n"]},"metadata":{},"sourceType":"module"}