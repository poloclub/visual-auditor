{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport default function requirePropFactory(componentNameInError, Component) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  } // eslint-disable-next-line react/forbid-foreign-prop-types\n\n\n  const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;\n\n  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {\n    const propFullNameSafe = propFullName || propName;\n    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];\n\n    if (defaultTypeChecker) {\n      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);\n\n      if (typeCheckerResult) {\n        return typeCheckerResult;\n      }\n    }\n\n    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {\n      return new Error(`The prop \\`${propFullNameSafe}\\` of ` + `\\`${componentNameInError}\\` can only be used together with the \\`${requiredProp}\\` prop.`);\n    }\n\n    return null;\n  };\n\n  return requireProp;\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/visual-auditor/node_modules/@mui/utils/esm/requirePropFactory.js"],"names":["_extends","requirePropFactory","componentNameInError","Component","process","env","NODE_ENV","prevPropTypes","propTypes","requireProp","requiredProp","props","propName","componentName","location","propFullName","args","propFullNameSafe","defaultTypeChecker","typeCheckerResult","Error"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,eAAe,SAASC,kBAAT,CAA4BC,oBAA5B,EAAkDC,SAAlD,EAA6D;AAC1E,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,WAAO,MAAM,IAAb;AACD,GAHyE,CAGxE;;;AAGF,QAAMC,aAAa,GAAGJ,SAAS,GAAGH,QAAQ,CAAC,EAAD,EAAKG,SAAS,CAACK,SAAf,CAAX,GAAuC,IAAtE;;AAEA,QAAMC,WAAW,GAAGC,YAAY,IAAI,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAiCC,QAAjC,EAA2CC,YAA3C,EAAyD,GAAGC,IAA5D,KAAqE;AACvG,UAAMC,gBAAgB,GAAGF,YAAY,IAAIH,QAAzC;AACA,UAAMM,kBAAkB,GAAGX,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACU,gBAAD,CAAzE;;AAEA,QAAIC,kBAAJ,EAAwB;AACtB,YAAMC,iBAAiB,GAAGD,kBAAkB,CAACP,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAiCC,QAAjC,EAA2CC,YAA3C,EAAyD,GAAGC,IAA5D,CAA5C;;AAEA,UAAIG,iBAAJ,EAAuB;AACrB,eAAOA,iBAAP;AACD;AACF;;AAED,QAAI,OAAOR,KAAK,CAACC,QAAD,CAAZ,KAA2B,WAA3B,IAA0C,CAACD,KAAK,CAACD,YAAD,CAApD,EAAoE;AAClE,aAAO,IAAIU,KAAJ,CAAW,cAAaH,gBAAiB,QAA/B,GAA0C,KAAIf,oBAAqB,2CAA0CQ,YAAa,UAApI,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GAjBD;;AAmBA,SAAOD,WAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport default function requirePropFactory(componentNameInError, Component) {\n  if (process.env.NODE_ENV === 'production') {\n    return () => null;\n  } // eslint-disable-next-line react/forbid-foreign-prop-types\n\n\n  const prevPropTypes = Component ? _extends({}, Component.propTypes) : null;\n\n  const requireProp = requiredProp => (props, propName, componentName, location, propFullName, ...args) => {\n    const propFullNameSafe = propFullName || propName;\n    const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];\n\n    if (defaultTypeChecker) {\n      const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);\n\n      if (typeCheckerResult) {\n        return typeCheckerResult;\n      }\n    }\n\n    if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {\n      return new Error(`The prop \\`${propFullNameSafe}\\` of ` + `\\`${componentNameInError}\\` can only be used together with the \\`${requiredProp}\\` prop.`);\n    }\n\n    return null;\n  };\n\n  return requireProp;\n}"]},"metadata":{},"sourceType":"module"}