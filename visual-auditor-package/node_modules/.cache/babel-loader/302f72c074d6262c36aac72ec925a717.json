{"ast":null,"code":"import { dispatch } from \"d3-dispatch\";\nimport { timer } from \"d3-timer\";\nimport lcg from \"./lcg.js\";\nexport function x(d) {\n  return d.x;\n}\nexport function y(d) {\n  return d.y;\n}\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\nexport default function (nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i,\n        n = nodes.length,\n        node;\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n      forces.forEach(function (force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(0.5 + i),\n            angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random);\n    return force;\n  }\n\n  initializeNodes();\n  return simulation = {\n    tick: tick,\n    restart: function () {\n      return stepper.restart(step), simulation;\n    },\n    stop: function () {\n      return stepper.stop(), simulation;\n    },\n    nodes: function (_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n    alpha: function (_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n    alphaMin: function (_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n    alphaDecay: function (_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n    alphaTarget: function (_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n    velocityDecay: function (_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n    randomSource: function (_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n    force: function (name, _) {\n      return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);\n    },\n    find: function (x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n      if (radius == null) radius = Infinity;else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n    on: function (name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/visual-auditor/node_modules/d3-force/src/simulation.js"],"names":["dispatch","timer","lcg","x","d","y","initialRadius","initialAngle","Math","PI","sqrt","nodes","simulation","alpha","alphaMin","alphaDecay","pow","alphaTarget","velocityDecay","forces","Map","stepper","step","event","random","tick","call","stop","iterations","i","n","length","node","undefined","k","forEach","force","fx","vx","fy","vy","initializeNodes","index","isNaN","radius","angle","cos","sin","initializeForce","initialize","restart","_","arguments","randomSource","name","delete","set","get","find","dx","dy","d2","closest","Infinity","on"],"mappings":"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","sourcesContent":["import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}