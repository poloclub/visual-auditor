{"ast":null,"code":"import ascending from \"./ascending.js\";\nexport default function greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n\n  if (compare.length === 1) {\n    let maxValue;\n\n    for (const element of values) {\n      const value = compare(element);\n\n      if (defined ? ascending(value, maxValue) > 0 : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n\n  return max;\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/node_modules/d3-array/src/greatest.js"],"names":["ascending","greatest","values","compare","max","defined","length","maxValue","element","value"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,gBAAtB;AAEA,eAAe,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,OAAO,GAAGH,SAApC,EAA+C;AAC5D,MAAII,GAAJ;AACA,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAIF,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AACxB,QAAIC,QAAJ;;AACA,SAAK,MAAMC,OAAX,IAAsBN,MAAtB,EAA8B;AAC5B,YAAMO,KAAK,GAAGN,OAAO,CAACK,OAAD,CAArB;;AACA,UAAIH,OAAO,GACLL,SAAS,CAACS,KAAD,EAAQF,QAAR,CAAT,GAA6B,CADxB,GAELP,SAAS,CAACS,KAAD,EAAQA,KAAR,CAAT,KAA4B,CAFlC,EAEqC;AACnCL,QAAAA,GAAG,GAAGI,OAAN;AACAD,QAAAA,QAAQ,GAAGE,KAAX;AACAJ,QAAAA,OAAO,GAAG,IAAV;AACD;AACF;AACF,GAZD,MAYO;AACL,SAAK,MAAMI,KAAX,IAAoBP,MAApB,EAA4B;AAC1B,UAAIG,OAAO,GACLF,OAAO,CAACM,KAAD,EAAQL,GAAR,CAAP,GAAsB,CADjB,GAELD,OAAO,CAACM,KAAD,EAAQA,KAAR,CAAP,KAA0B,CAFhC,EAEmC;AACjCL,QAAAA,GAAG,GAAGK,KAAN;AACAJ,QAAAA,OAAO,GAAG,IAAV;AACD;AACF;AACF;;AACD,SAAOD,GAAP;AACD","sourcesContent":["import ascending from \"./ascending.js\";\n\nexport default function greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n  if (compare.length === 1) {\n    let maxValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, maxValue) > 0\n          : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, max) > 0\n          : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n  return max;\n}\n"]},"metadata":{},"sourceType":"module"}