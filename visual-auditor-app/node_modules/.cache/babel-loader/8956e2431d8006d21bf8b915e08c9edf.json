{"ast":null,"code":"import { Adder } from \"d3-array\";\nimport { cartesian, cartesianCross, cartesianNormalizeInPlace } from \"./cartesian.js\";\nimport { abs, asin, atan2, cos, epsilon, epsilon2, halfPi, pi, quarterPi, sign, sin, tau } from \"./math.js\";\n\nfunction longitude(point) {\n  return abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function (polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n  var sum = new Adder();\n  if (sinPhi === 1) phi = halfPi + epsilon;else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta; // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  } // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ winding & 1;\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/node_modules/d3-geo/src/polygonContains.js"],"names":["Adder","cartesian","cartesianCross","cartesianNormalizeInPlace","abs","asin","atan2","cos","epsilon","epsilon2","halfPi","pi","quarterPi","sign","sin","tau","longitude","point","polygon","lambda","phi","sinPhi","normal","angle","winding","sum","i","n","length","m","ring","point0","lambda0","phi0","sinPhi0","cosPhi0","j","lambda1","sinPhi1","cosPhi1","point1","phi1","delta","absDelta","antimeridian","k","add","arc","intersection","phiArc"],"mappings":"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","sourcesContent":["import {Adder} from \"d3-array\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, epsilon2, halfPi, pi, quarterPi, sign, sin, tau} from \"./math.js\";\n\nfunction longitude(point) {\n  return abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  var sum = new Adder();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ (winding & 1);\n}\n"]},"metadata":{},"sourceType":"module"}