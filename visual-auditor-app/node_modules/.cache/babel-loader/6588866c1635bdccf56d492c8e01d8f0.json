{"ast":null,"code":"import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\nconst tau = 2 * Math.PI,\n      pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n} // A triangulation is collinear if all its triangles have a non-null area\n\n\nfunction collinear(d) {\n  const {\n    triangles,\n    coords\n  } = d;\n\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n\n    this._init();\n  }\n\n  update() {\n    this._delaunator.update();\n\n    this._init();\n\n    return this;\n  }\n\n  _init() {\n    const d = this._delaunator,\n          points = this.points; // check for collinear\n\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({\n        length: points.length / 2\n      }, (_, i) => i).sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n\n      const e = this.collinear[0],\n            f = this.collinear[this.collinear.length - 1],\n            bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]],\n            r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n\n    const hullIndex = this._hullIndex.fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n\n\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    } // degenerate case: 1 or 2 (distinct) points\n\n\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      inedges[hull[0]] = 1;\n\n      if (hull.length === 2) {\n        inedges[hull[1]] = 0;\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n      }\n    }\n  }\n\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n\n  *neighbors(i) {\n    const {\n      inedges,\n      hull,\n      _hullIndex,\n      halfedges,\n      triangles,\n      collinear\n    } = this; // degenerate case with several collinear points\n\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n\n    let e = e0,\n        p0 = -1;\n\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n\n      e = halfedges[e];\n\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n\n    return c;\n  }\n\n  _step(i, x, y) {\n    const {\n      inedges,\n      hull,\n      _hullIndex,\n      halfedges,\n      triangles,\n      points\n    } = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n\n      e = halfedges[e];\n\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n\n        break;\n      }\n    } while (e !== e0);\n\n    return c;\n  }\n\n  render(context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      points,\n      halfedges,\n      triangles\n    } = this;\n\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n\n  renderPoints(context, r) {\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n    r = r == undefined ? 2 : +r;\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      points\n    } = this;\n\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i],\n            y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n\n    return buffer && buffer.value();\n  }\n\n  renderHull(context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      hull,\n      points\n    } = this;\n    const h = hull[0] * 2,\n          n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n\n    context.closePath();\n    return buffer && buffer.value();\n  }\n\n  hullPolygon() {\n    const polygon = new Polygon();\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path() : undefined;\n    const {\n      points,\n      triangles\n    } = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n\n  *trianglePolygons() {\n    const {\n      triangles\n    } = this;\n\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n\n  trianglePolygon(i) {\n    const polygon = new Polygon();\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/node_modules/d3-delaunay/src/delaunay.js"],"names":["Delaunator","Path","Polygon","Voronoi","tau","Math","PI","pow","pointX","p","pointY","collinear","d","triangles","coords","i","length","a","b","c","cross","jitter","x","y","r","sin","cos","Delaunay","from","points","fx","fy","that","flatArray","Float64Array","flatIterable","constructor","_delaunator","inedges","Int32Array","_hullIndex","_init","update","hull","_","sort","j","e","f","bounds","hypot","n","halfedges","fill","hullIndex","voronoi","neighbors","l","indexOf","e0","p0","find","i0","_step","dc","t","dt","render","context","buffer","undefined","ti","tj","moveTo","lineTo","renderHull","value","renderPoints","arc","h","closePath","hullPolygon","polygon","renderTriangle","t0","t1","t2","trianglePolygons","trianglePolygon","array","call"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAACC,EAArB;AAAA,MAAyBC,GAAG,GAAGF,IAAI,CAACE,GAApC;;AAEA,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,SAAOA,CAAC,CAAC,CAAD,CAAR;AACD;;AAED,SAASC,MAAT,CAAgBD,CAAhB,EAAmB;AACjB,SAAOA,CAAC,CAAC,CAAD,CAAR;AACD,C,CAED;;;AACA,SAASE,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,QAAM;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAAsBF,CAA5B;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;AAC5C,UAAME,CAAC,GAAG,IAAIJ,SAAS,CAACE,CAAD,CAAvB;AAAA,UACMG,CAAC,GAAG,IAAIL,SAAS,CAACE,CAAC,GAAG,CAAL,CADvB;AAAA,UAEMI,CAAC,GAAG,IAAIN,SAAS,CAACE,CAAC,GAAG,CAAL,CAFvB;AAAA,UAGMK,KAAK,GAAG,CAACN,MAAM,CAACK,CAAD,CAAN,GAAYL,MAAM,CAACG,CAAD,CAAnB,KAA2BH,MAAM,CAACI,CAAC,GAAG,CAAL,CAAN,GAAgBJ,MAAM,CAACG,CAAC,GAAG,CAAL,CAAjD,IACA,CAACH,MAAM,CAACI,CAAD,CAAN,GAAYJ,MAAM,CAACG,CAAD,CAAnB,KAA2BH,MAAM,CAACK,CAAC,GAAG,CAAL,CAAN,GAAgBL,MAAM,CAACG,CAAC,GAAG,CAAL,CAAjD,CAJd;AAKA,QAAIG,KAAK,GAAG,KAAZ,EAAmB,OAAO,KAAP;AACpB;;AACD,SAAO,IAAP;AACD;;AAED,SAASC,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AACvB,SAAO,CAACF,CAAC,GAAGjB,IAAI,CAACoB,GAAL,CAASH,CAAC,GAAGC,CAAb,IAAkBC,CAAvB,EAA0BD,CAAC,GAAGlB,IAAI,CAACqB,GAAL,CAASJ,CAAC,GAAGC,CAAb,IAAkBC,CAAhD,CAAP;AACD;;AAED,eAAe,MAAMG,QAAN,CAAe;AACjB,SAAJC,IAAI,CAACC,MAAD,EAASC,EAAE,GAAGtB,MAAd,EAAsBuB,EAAE,GAAGrB,MAA3B,EAAmCsB,IAAnC,EAAyC;AAClD,WAAO,IAAIL,QAAJ,CAAa,YAAYE,MAAZ,GACdI,SAAS,CAACJ,MAAD,EAASC,EAAT,EAAaC,EAAb,EAAiBC,IAAjB,CADK,GAEdE,YAAY,CAACN,IAAb,CAAkBO,YAAY,CAACN,MAAD,EAASC,EAAT,EAAaC,EAAb,EAAiBC,IAAjB,CAA9B,CAFC,CAAP;AAGD;;AACDI,EAAAA,WAAW,CAACP,MAAD,EAAS;AAClB,SAAKQ,WAAL,GAAmB,IAAIrC,UAAJ,CAAe6B,MAAf,CAAnB;AACA,SAAKS,OAAL,GAAe,IAAIC,UAAJ,CAAeV,MAAM,CAACb,MAAP,GAAgB,CAA/B,CAAf;AACA,SAAKwB,UAAL,GAAkB,IAAID,UAAJ,CAAeV,MAAM,CAACb,MAAP,GAAgB,CAA/B,CAAlB;AACA,SAAKa,MAAL,GAAc,KAAKQ,WAAL,CAAiBvB,MAA/B;;AACA,SAAK2B,KAAL;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,SAAKL,WAAL,CAAiBK,MAAjB;;AACA,SAAKD,KAAL;;AACA,WAAO,IAAP;AACD;;AACDA,EAAAA,KAAK,GAAG;AACN,UAAM7B,CAAC,GAAG,KAAKyB,WAAf;AAAA,UAA4BR,MAAM,GAAG,KAAKA,MAA1C,CADM,CAGN;;AACA,QAAIjB,CAAC,CAAC+B,IAAF,IAAU/B,CAAC,CAAC+B,IAAF,CAAO3B,MAAP,GAAgB,CAA1B,IAA+BL,SAAS,CAACC,CAAD,CAA5C,EAAiD;AAC/C,WAAKD,SAAL,GAAiB4B,UAAU,CAACX,IAAX,CAAgB;AAACZ,QAAAA,MAAM,EAAEa,MAAM,CAACb,MAAP,GAAc;AAAvB,OAAhB,EAA2C,CAAC4B,CAAD,EAAG7B,CAAH,KAASA,CAApD,EACd8B,IADc,CACT,CAAC9B,CAAD,EAAI+B,CAAJ,KAAUjB,MAAM,CAAC,IAAId,CAAL,CAAN,GAAgBc,MAAM,CAAC,IAAIiB,CAAL,CAAtB,IAAiCjB,MAAM,CAAC,IAAId,CAAJ,GAAQ,CAAT,CAAN,GAAoBc,MAAM,CAAC,IAAIiB,CAAJ,GAAQ,CAAT,CAD5D,CAAjB,CAD+C,CAE4C;;AAC3F,YAAMC,CAAC,GAAG,KAAKpC,SAAL,CAAe,CAAf,CAAV;AAAA,YAA6BqC,CAAC,GAAG,KAAKrC,SAAL,CAAe,KAAKA,SAAL,CAAeK,MAAf,GAAwB,CAAvC,CAAjC;AAAA,YACEiC,MAAM,GAAG,CAAEpB,MAAM,CAAC,IAAIkB,CAAL,CAAR,EAAiBlB,MAAM,CAAC,IAAIkB,CAAJ,GAAQ,CAAT,CAAvB,EAAoClB,MAAM,CAAC,IAAImB,CAAL,CAA1C,EAAmDnB,MAAM,CAAC,IAAImB,CAAJ,GAAQ,CAAT,CAAzD,CADX;AAAA,YAEExB,CAAC,GAAG,OAAOnB,IAAI,CAAC6C,KAAL,CAAWD,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAA7B,EAAkCA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAApD,CAFb;;AAGA,WAAK,IAAIlC,CAAC,GAAG,CAAR,EAAWoC,CAAC,GAAGtB,MAAM,CAACb,MAAP,GAAgB,CAApC,EAAuCD,CAAC,GAAGoC,CAA3C,EAA8C,EAAEpC,CAAhD,EAAmD;AACjD,cAAMN,CAAC,GAAGY,MAAM,CAACQ,MAAM,CAAC,IAAId,CAAL,CAAP,EAAgBc,MAAM,CAAC,IAAId,CAAJ,GAAQ,CAAT,CAAtB,EAAmCS,CAAnC,CAAhB;AACAK,QAAAA,MAAM,CAAC,IAAId,CAAL,CAAN,GAAgBN,CAAC,CAAC,CAAD,CAAjB;AACAoB,QAAAA,MAAM,CAAC,IAAId,CAAJ,GAAQ,CAAT,CAAN,GAAoBN,CAAC,CAAC,CAAD,CAArB;AACD;;AACD,WAAK4B,WAAL,GAAmB,IAAIrC,UAAJ,CAAe6B,MAAf,CAAnB;AACD,KAZD,MAYO;AACL,aAAO,KAAKlB,SAAZ;AACD;;AAED,UAAMyC,SAAS,GAAG,KAAKA,SAAL,GAAiB,KAAKf,WAAL,CAAiBe,SAApD;AACA,UAAMT,IAAI,GAAG,KAAKA,IAAL,GAAY,KAAKN,WAAL,CAAiBM,IAA1C;AACA,UAAM9B,SAAS,GAAG,KAAKA,SAAL,GAAiB,KAAKwB,WAAL,CAAiBxB,SAApD;AACA,UAAMyB,OAAO,GAAG,KAAKA,OAAL,CAAae,IAAb,CAAkB,CAAC,CAAnB,CAAhB;;AACA,UAAMC,SAAS,GAAG,KAAKd,UAAL,CAAgBa,IAAhB,CAAqB,CAAC,CAAtB,CAAlB,CAxBM,CA0BN;AACA;AACA;;;AACA,SAAK,IAAIN,CAAC,GAAG,CAAR,EAAWI,CAAC,GAAGC,SAAS,CAACpC,MAA9B,EAAsC+B,CAAC,GAAGI,CAA1C,EAA6C,EAAEJ,CAA/C,EAAkD;AAChD,YAAMtC,CAAC,GAAGI,SAAS,CAACkC,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcA,CAAC,GAAG,CAAlB,GAAsBA,CAAC,GAAG,CAA3B,CAAnB;AACA,UAAIK,SAAS,CAACL,CAAD,CAAT,KAAiB,CAAC,CAAlB,IAAuBT,OAAO,CAAC7B,CAAD,CAAP,KAAe,CAAC,CAA3C,EAA8C6B,OAAO,CAAC7B,CAAD,CAAP,GAAasC,CAAb;AAC/C;;AACD,SAAK,IAAIhC,CAAC,GAAG,CAAR,EAAWoC,CAAC,GAAGR,IAAI,CAAC3B,MAAzB,EAAiCD,CAAC,GAAGoC,CAArC,EAAwC,EAAEpC,CAA1C,EAA6C;AAC3CuC,MAAAA,SAAS,CAACX,IAAI,CAAC5B,CAAD,CAAL,CAAT,GAAqBA,CAArB;AACD,KAnCK,CAqCN;;;AACA,QAAI4B,IAAI,CAAC3B,MAAL,IAAe,CAAf,IAAoB2B,IAAI,CAAC3B,MAAL,GAAc,CAAtC,EAAyC;AACvC,WAAKH,SAAL,GAAiB,IAAI0B,UAAJ,CAAe,CAAf,EAAkBc,IAAlB,CAAuB,CAAC,CAAxB,CAAjB;AACA,WAAKD,SAAL,GAAiB,IAAIb,UAAJ,CAAe,CAAf,EAAkBc,IAAlB,CAAuB,CAAC,CAAxB,CAAjB;AACA,WAAKxC,SAAL,CAAe,CAAf,IAAoB8B,IAAI,CAAC,CAAD,CAAxB;AACAL,MAAAA,OAAO,CAACK,IAAI,CAAC,CAAD,CAAL,CAAP,GAAmB,CAAnB;;AACA,UAAIA,IAAI,CAAC3B,MAAL,KAAgB,CAApB,EAAuB;AACrBsB,QAAAA,OAAO,CAACK,IAAI,CAAC,CAAD,CAAL,CAAP,GAAmB,CAAnB;AACA,aAAK9B,SAAL,CAAe,CAAf,IAAoB8B,IAAI,CAAC,CAAD,CAAxB;AACA,aAAK9B,SAAL,CAAe,CAAf,IAAoB8B,IAAI,CAAC,CAAD,CAAxB;AACD;AACF;AACF;;AACDY,EAAAA,OAAO,CAACN,MAAD,EAAS;AACd,WAAO,IAAI9C,OAAJ,CAAY,IAAZ,EAAkB8C,MAAlB,CAAP;AACD;;AACS,GAATO,SAAS,CAACzC,CAAD,EAAI;AACZ,UAAM;AAACuB,MAAAA,OAAD;AAAUK,MAAAA,IAAV;AAAgBH,MAAAA,UAAhB;AAA4BY,MAAAA,SAA5B;AAAuCvC,MAAAA,SAAvC;AAAkDF,MAAAA;AAAlD,QAA+D,IAArE,CADY,CAGZ;;AACA,QAAIA,SAAJ,EAAe;AACb,YAAM8C,CAAC,GAAG9C,SAAS,CAAC+C,OAAV,CAAkB3C,CAAlB,CAAV;AACA,UAAI0C,CAAC,GAAG,CAAR,EAAW,MAAM9C,SAAS,CAAC8C,CAAC,GAAG,CAAL,CAAf;AACX,UAAIA,CAAC,GAAG9C,SAAS,CAACK,MAAV,GAAmB,CAA3B,EAA8B,MAAML,SAAS,CAAC8C,CAAC,GAAG,CAAL,CAAf;AAC9B;AACD;;AAED,UAAME,EAAE,GAAGrB,OAAO,CAACvB,CAAD,CAAlB;AACA,QAAI4C,EAAE,KAAK,CAAC,CAAZ,EAAe,OAZH,CAYW;;AACvB,QAAIZ,CAAC,GAAGY,EAAR;AAAA,QAAYC,EAAE,GAAG,CAAC,CAAlB;;AACA,OAAG;AACD,YAAMA,EAAE,GAAG/C,SAAS,CAACkC,CAAD,CAApB;AACAA,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcA,CAAC,GAAG,CAAlB,GAAsBA,CAAC,GAAG,CAA9B;AACA,UAAIlC,SAAS,CAACkC,CAAD,CAAT,KAAiBhC,CAArB,EAAwB,OAHvB,CAG+B;;AAChCgC,MAAAA,CAAC,GAAGK,SAAS,CAACL,CAAD,CAAb;;AACA,UAAIA,CAAC,KAAK,CAAC,CAAX,EAAc;AACZ,cAAMtC,CAAC,GAAGkC,IAAI,CAAC,CAACH,UAAU,CAACzB,CAAD,CAAV,GAAgB,CAAjB,IAAsB4B,IAAI,CAAC3B,MAA5B,CAAd;AACA,YAAIP,CAAC,KAAKmD,EAAV,EAAc,MAAMnD,CAAN;AACd;AACD;AACF,KAVD,QAUSsC,CAAC,KAAKY,EAVf;AAWD;;AACDE,EAAAA,IAAI,CAACvC,CAAD,EAAIC,CAAJ,EAAOR,CAAC,GAAG,CAAX,EAAc;AAChB,QAAI,CAACO,CAAC,GAAG,CAACA,CAAL,EAAQA,CAAC,KAAKA,CAAf,MAAsBC,CAAC,GAAG,CAACA,CAAL,EAAQA,CAAC,KAAKA,CAApC,CAAJ,EAA4C,OAAO,CAAC,CAAR;AAC5C,UAAMuC,EAAE,GAAG/C,CAAX;AACA,QAAII,CAAJ;;AACA,WAAO,CAACA,CAAC,GAAG,KAAK4C,KAAL,CAAWhD,CAAX,EAAcO,CAAd,EAAiBC,CAAjB,CAAL,KAA6B,CAA7B,IAAkCJ,CAAC,KAAKJ,CAAxC,IAA6CI,CAAC,KAAK2C,EAA1D,EAA8D/C,CAAC,GAAGI,CAAJ;;AAC9D,WAAOA,CAAP;AACD;;AACD4C,EAAAA,KAAK,CAAChD,CAAD,EAAIO,CAAJ,EAAOC,CAAP,EAAU;AACb,UAAM;AAACe,MAAAA,OAAD;AAAUK,MAAAA,IAAV;AAAgBH,MAAAA,UAAhB;AAA4BY,MAAAA,SAA5B;AAAuCvC,MAAAA,SAAvC;AAAkDgB,MAAAA;AAAlD,QAA4D,IAAlE;AACA,QAAIS,OAAO,CAACvB,CAAD,CAAP,KAAe,CAAC,CAAhB,IAAqB,CAACc,MAAM,CAACb,MAAjC,EAAyC,OAAO,CAACD,CAAC,GAAG,CAAL,KAAWc,MAAM,CAACb,MAAP,IAAiB,CAA5B,CAAP;AACzC,QAAIG,CAAC,GAAGJ,CAAR;AACA,QAAIiD,EAAE,GAAGzD,GAAG,CAACe,CAAC,GAAGO,MAAM,CAACd,CAAC,GAAG,CAAL,CAAX,EAAoB,CAApB,CAAH,GAA4BR,GAAG,CAACgB,CAAC,GAAGM,MAAM,CAACd,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAX,EAAwB,CAAxB,CAAxC;AACA,UAAM4C,EAAE,GAAGrB,OAAO,CAACvB,CAAD,CAAlB;AACA,QAAIgC,CAAC,GAAGY,EAAR;;AACA,OAAG;AACD,UAAIM,CAAC,GAAGpD,SAAS,CAACkC,CAAD,CAAjB;AACA,YAAMmB,EAAE,GAAG3D,GAAG,CAACe,CAAC,GAAGO,MAAM,CAACoC,CAAC,GAAG,CAAL,CAAX,EAAoB,CAApB,CAAH,GAA4B1D,GAAG,CAACgB,CAAC,GAAGM,MAAM,CAACoC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAX,EAAwB,CAAxB,CAA1C;AACA,UAAIC,EAAE,GAAGF,EAAT,EAAaA,EAAE,GAAGE,EAAL,EAAS/C,CAAC,GAAG8C,CAAb;AACblB,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAJ,KAAU,CAAV,GAAcA,CAAC,GAAG,CAAlB,GAAsBA,CAAC,GAAG,CAA9B;AACA,UAAIlC,SAAS,CAACkC,CAAD,CAAT,KAAiBhC,CAArB,EAAwB,MALvB,CAK8B;;AAC/BgC,MAAAA,CAAC,GAAGK,SAAS,CAACL,CAAD,CAAb;;AACA,UAAIA,CAAC,KAAK,CAAC,CAAX,EAAc;AACZA,QAAAA,CAAC,GAAGJ,IAAI,CAAC,CAACH,UAAU,CAACzB,CAAD,CAAV,GAAgB,CAAjB,IAAsB4B,IAAI,CAAC3B,MAA5B,CAAR;;AACA,YAAI+B,CAAC,KAAKkB,CAAV,EAAa;AACX,cAAI1D,GAAG,CAACe,CAAC,GAAGO,MAAM,CAACkB,CAAC,GAAG,CAAL,CAAX,EAAoB,CAApB,CAAH,GAA4BxC,GAAG,CAACgB,CAAC,GAAGM,MAAM,CAACkB,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAX,EAAwB,CAAxB,CAA/B,GAA4DiB,EAAhE,EAAoE,OAAOjB,CAAP;AACrE;;AACD;AACD;AACF,KAdD,QAcSA,CAAC,KAAKY,EAdf;;AAeA,WAAOxC,CAAP;AACD;;AACDgD,EAAAA,MAAM,CAACC,OAAD,EAAU;AACd,UAAMC,MAAM,GAAGD,OAAO,IAAI,IAAX,GAAkBA,OAAO,GAAG,IAAInE,IAAJ,EAA5B,GAAuCqE,SAAtD;AACA,UAAM;AAACzC,MAAAA,MAAD;AAASuB,MAAAA,SAAT;AAAoBvC,MAAAA;AAApB,QAAiC,IAAvC;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWoC,CAAC,GAAGC,SAAS,CAACpC,MAA9B,EAAsCD,CAAC,GAAGoC,CAA1C,EAA6C,EAAEpC,CAA/C,EAAkD;AAChD,YAAM+B,CAAC,GAAGM,SAAS,CAACrC,CAAD,CAAnB;AACA,UAAI+B,CAAC,GAAG/B,CAAR,EAAW;AACX,YAAMwD,EAAE,GAAG1D,SAAS,CAACE,CAAD,CAAT,GAAe,CAA1B;AACA,YAAMyD,EAAE,GAAG3D,SAAS,CAACiC,CAAD,CAAT,GAAe,CAA1B;AACAsB,MAAAA,OAAO,CAACK,MAAR,CAAe5C,MAAM,CAAC0C,EAAD,CAArB,EAA2B1C,MAAM,CAAC0C,EAAE,GAAG,CAAN,CAAjC;AACAH,MAAAA,OAAO,CAACM,MAAR,CAAe7C,MAAM,CAAC2C,EAAD,CAArB,EAA2B3C,MAAM,CAAC2C,EAAE,GAAG,CAAN,CAAjC;AACD;;AACD,SAAKG,UAAL,CAAgBP,OAAhB;AACA,WAAOC,MAAM,IAAIA,MAAM,CAACO,KAAP,EAAjB;AACD;;AACDC,EAAAA,YAAY,CAACT,OAAD,EAAU5C,CAAV,EAAa;AACvB,QAAIA,CAAC,KAAK8C,SAAN,KAAoB,CAACF,OAAD,IAAY,OAAOA,OAAO,CAACK,MAAf,KAA0B,UAA1D,CAAJ,EAA2EjD,CAAC,GAAG4C,OAAJ,EAAaA,OAAO,GAAG,IAAvB;AAC3E5C,IAAAA,CAAC,GAAGA,CAAC,IAAI8C,SAAL,GAAiB,CAAjB,GAAqB,CAAC9C,CAA1B;AACA,UAAM6C,MAAM,GAAGD,OAAO,IAAI,IAAX,GAAkBA,OAAO,GAAG,IAAInE,IAAJ,EAA5B,GAAuCqE,SAAtD;AACA,UAAM;AAACzC,MAAAA;AAAD,QAAW,IAAjB;;AACA,SAAK,IAAId,CAAC,GAAG,CAAR,EAAWoC,CAAC,GAAGtB,MAAM,CAACb,MAA3B,EAAmCD,CAAC,GAAGoC,CAAvC,EAA0CpC,CAAC,IAAI,CAA/C,EAAkD;AAChD,YAAMO,CAAC,GAAGO,MAAM,CAACd,CAAD,CAAhB;AAAA,YAAqBQ,CAAC,GAAGM,MAAM,CAACd,CAAC,GAAG,CAAL,CAA/B;AACAqD,MAAAA,OAAO,CAACK,MAAR,CAAenD,CAAC,GAAGE,CAAnB,EAAsBD,CAAtB;AACA6C,MAAAA,OAAO,CAACU,GAAR,CAAYxD,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqB,CAArB,EAAwBpB,GAAxB;AACD;;AACD,WAAOiE,MAAM,IAAIA,MAAM,CAACO,KAAP,EAAjB;AACD;;AACDD,EAAAA,UAAU,CAACP,OAAD,EAAU;AAClB,UAAMC,MAAM,GAAGD,OAAO,IAAI,IAAX,GAAkBA,OAAO,GAAG,IAAInE,IAAJ,EAA5B,GAAuCqE,SAAtD;AACA,UAAM;AAAC3B,MAAAA,IAAD;AAAOd,MAAAA;AAAP,QAAiB,IAAvB;AACA,UAAMkD,CAAC,GAAGpC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAApB;AAAA,UAAuBQ,CAAC,GAAGR,IAAI,CAAC3B,MAAhC;AACAoD,IAAAA,OAAO,CAACK,MAAR,CAAe5C,MAAM,CAACkD,CAAD,CAArB,EAA0BlD,MAAM,CAACkD,CAAC,GAAG,CAAL,CAAhC;;AACA,SAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoC,CAApB,EAAuB,EAAEpC,CAAzB,EAA4B;AAC1B,YAAMgE,CAAC,GAAG,IAAIpC,IAAI,CAAC5B,CAAD,CAAlB;AACAqD,MAAAA,OAAO,CAACM,MAAR,CAAe7C,MAAM,CAACkD,CAAD,CAArB,EAA0BlD,MAAM,CAACkD,CAAC,GAAG,CAAL,CAAhC;AACD;;AACDX,IAAAA,OAAO,CAACY,SAAR;AACA,WAAOX,MAAM,IAAIA,MAAM,CAACO,KAAP,EAAjB;AACD;;AACDK,EAAAA,WAAW,GAAG;AACZ,UAAMC,OAAO,GAAG,IAAIhF,OAAJ,EAAhB;AACA,SAAKyE,UAAL,CAAgBO,OAAhB;AACA,WAAOA,OAAO,CAACN,KAAR,EAAP;AACD;;AACDO,EAAAA,cAAc,CAACpE,CAAD,EAAIqD,OAAJ,EAAa;AACzB,UAAMC,MAAM,GAAGD,OAAO,IAAI,IAAX,GAAkBA,OAAO,GAAG,IAAInE,IAAJ,EAA5B,GAAuCqE,SAAtD;AACA,UAAM;AAACzC,MAAAA,MAAD;AAAShB,MAAAA;AAAT,QAAsB,IAA5B;AACA,UAAMuE,EAAE,GAAGvE,SAAS,CAACE,CAAC,IAAI,CAAN,CAAT,GAAoB,CAA/B;AACA,UAAMsE,EAAE,GAAGxE,SAAS,CAACE,CAAC,GAAG,CAAL,CAAT,GAAmB,CAA9B;AACA,UAAMuE,EAAE,GAAGzE,SAAS,CAACE,CAAC,GAAG,CAAL,CAAT,GAAmB,CAA9B;AACAqD,IAAAA,OAAO,CAACK,MAAR,CAAe5C,MAAM,CAACuD,EAAD,CAArB,EAA2BvD,MAAM,CAACuD,EAAE,GAAG,CAAN,CAAjC;AACAhB,IAAAA,OAAO,CAACM,MAAR,CAAe7C,MAAM,CAACwD,EAAD,CAArB,EAA2BxD,MAAM,CAACwD,EAAE,GAAG,CAAN,CAAjC;AACAjB,IAAAA,OAAO,CAACM,MAAR,CAAe7C,MAAM,CAACyD,EAAD,CAArB,EAA2BzD,MAAM,CAACyD,EAAE,GAAG,CAAN,CAAjC;AACAlB,IAAAA,OAAO,CAACY,SAAR;AACA,WAAOX,MAAM,IAAIA,MAAM,CAACO,KAAP,EAAjB;AACD;;AACgB,GAAhBW,gBAAgB,GAAG;AAClB,UAAM;AAAC1E,MAAAA;AAAD,QAAc,IAApB;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAR,EAAWoC,CAAC,GAAGtC,SAAS,CAACG,MAAV,GAAmB,CAAvC,EAA0CD,CAAC,GAAGoC,CAA9C,EAAiD,EAAEpC,CAAnD,EAAsD;AACpD,YAAM,KAAKyE,eAAL,CAAqBzE,CAArB,CAAN;AACD;AACF;;AACDyE,EAAAA,eAAe,CAACzE,CAAD,EAAI;AACjB,UAAMmE,OAAO,GAAG,IAAIhF,OAAJ,EAAhB;AACA,SAAKiF,cAAL,CAAoBpE,CAApB,EAAuBmE,OAAvB;AACA,WAAOA,OAAO,CAACN,KAAR,EAAP;AACD;;AAjM2B;;AAoM9B,SAAS3C,SAAT,CAAmBJ,MAAnB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,IAAnC,EAAyC;AACvC,QAAMmB,CAAC,GAAGtB,MAAM,CAACb,MAAjB;AACA,QAAMyE,KAAK,GAAG,IAAIvD,YAAJ,CAAiBiB,CAAC,GAAG,CAArB,CAAd;;AACA,OAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoC,CAApB,EAAuB,EAAEpC,CAAzB,EAA4B;AAC1B,UAAMN,CAAC,GAAGoB,MAAM,CAACd,CAAD,CAAhB;AACA0E,IAAAA,KAAK,CAAC1E,CAAC,GAAG,CAAL,CAAL,GAAee,EAAE,CAAC4D,IAAH,CAAQ1D,IAAR,EAAcvB,CAAd,EAAiBM,CAAjB,EAAoBc,MAApB,CAAf;AACA4D,IAAAA,KAAK,CAAC1E,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAL,GAAmBgB,EAAE,CAAC2D,IAAH,CAAQ1D,IAAR,EAAcvB,CAAd,EAAiBM,CAAjB,EAAoBc,MAApB,CAAnB;AACD;;AACD,SAAO4D,KAAP;AACD;;AAED,UAAUtD,YAAV,CAAuBN,MAAvB,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,IAAvC,EAA6C;AAC3C,MAAIjB,CAAC,GAAG,CAAR;;AACA,OAAK,MAAMN,CAAX,IAAgBoB,MAAhB,EAAwB;AACtB,UAAMC,EAAE,CAAC4D,IAAH,CAAQ1D,IAAR,EAAcvB,CAAd,EAAiBM,CAAjB,EAAoBc,MAApB,CAAN;AACA,UAAME,EAAE,CAAC2D,IAAH,CAAQ1D,IAAR,EAAcvB,CAAd,EAAiBM,CAAjB,EAAoBc,MAApB,CAAN;AACA,MAAEd,CAAF;AACD;AACF","sourcesContent":["import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) {\n        inedges[hull[1]] = 0;\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n      }\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r) {\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n    r = r == undefined ? 2 : +r;\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}