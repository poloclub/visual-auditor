{"ast":null,"code":"import { quadtree } from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function (radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i,\n        n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data,\n          rj = quad.r,\n          r = ri + rj;\n\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n\n        return;\n      }\n\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length,\n        node;\n    radii = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n  }\n\n  force.initialize = function (_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function (_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}","map":{"version":3,"sources":["/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/node_modules/d3-force/src/collide.js"],"names":["quadtree","constant","jiggle","x","d","vx","y","vy","radius","nodes","radii","random","strength","iterations","force","i","n","length","tree","node","xi","yi","ri","ri2","k","visitAfter","prepare","index","visit","apply","quad","x0","y0","x1","y1","data","rj","r","l","Math","sqrt","initialize","Array","_nodes","_random","_","arguments"],"mappings":"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","sourcesContent":["import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n"]},"metadata":{},"sourceType":"module"}