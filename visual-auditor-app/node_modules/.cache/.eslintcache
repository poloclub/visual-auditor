[{"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/index.js":"1","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/App.js":"2","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Nav/Nav.js":"3","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Main/Main.js":"4","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/RightDrawer/RightDrawer.js":"5","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/LeftDrawer/LeftDrawer.js":"6","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Main/GraphLayout.js":"7","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Main/SliceBarChart.js":"8","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Main/ForceLayout.js":"9","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/hooks/useD3.js":"10"},{"size":219,"mtime":1644697622419,"results":"11","hashOfConfig":"12"},{"size":3187,"mtime":1644697622288,"results":"13","hashOfConfig":"12"},{"size":1392,"mtime":1644697622308,"results":"14","hashOfConfig":"12"},{"size":7122,"mtime":1644697622303,"results":"15","hashOfConfig":"12"},{"size":3932,"mtime":1644697907710,"results":"16","hashOfConfig":"12"},{"size":10342,"mtime":1644697890430,"results":"17","hashOfConfig":"12"},{"size":16227,"mtime":1644697622301,"results":"18","hashOfConfig":"12"},{"size":5995,"mtime":1644697622304,"results":"19","hashOfConfig":"12"},{"size":9692,"mtime":1644697622298,"results":"20","hashOfConfig":"12"},{"size":268,"mtime":1644697622417,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18hnpxb",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/index.js",[],"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/App.js",["47","48"],"import React from 'react';\nimport Nav from './components/Nav/Nav';\nimport LeftDrawer from './components/LeftDrawer/LeftDrawer';\nimport RightDrawer from './components/RightDrawer/RightDrawer';\nimport Main from './components/Main/Main';\n\nwindow.onbeforeunload = function () {\n  window.scrollTo(0, 0);\n};\n\nfunction App() {\n  const [algorithm, setAlgorithm] = React.useState('slicefinder');\n  const [numFeatures, setNumFeatures] = React.useState(2);\n  const [sampleSize, setSampleSize] = React.useState(0);\n  const [metric, setMetric] = React.useState('Log Loss');\n  const [view, setView] = React.useState('bar');\n  const [sortBy, setSortBy] = React.useState('metric');\n  const [overperforming, setOverperforming] = React.useState(false);\n  const [radius, setRadius] = React.useState('log');\n  const [edgeFiltering, setEdgeFiltering] = React.useState(100);\n  const [edgeThickness, setEdgeThickness] = React.useState(1);\n  const [edgeForce, setEdgeForce] = React.useState(1);\n  const [cursorMode, setCursorMode] = React.useState('drag');\n  const [features, setFeatures] = React.useState([\n    'Age',\n    'Workclass',\n    'Education',\n    'Education-Num',\n    'Marital Status',\n    'Occupation',\n    'Relationship',\n    'Race',\n    'Sex',\n    'Capital Gain',\n    'Capital Loss',\n    'Hours Per Week',\n    'Country',\n  ]);\n  const [details, setDetails] = React.useState(null);\n  const setDetailsCallback = React.useCallback((details) => {\n    setDetails(details);\n  }, []);\n  const [showConvexHull, setShowConvexHull] = React.useState(false);\n\n  return (\n    <div className='App'>\n      <Nav\n        view={view}\n        setView={setView}\n        algorithm={algorithm}\n        setAlgorithm={setAlgorithm}\n      />\n      <LeftDrawer\n        numFeatures={numFeatures}\n        setNumFeatures={setNumFeatures}\n        sampleSize={sampleSize}\n        setSampleSize={setSampleSize}\n        metric={metric}\n        setMetric={setMetric}\n        sortBy={sortBy}\n        setSortBy={setSortBy}\n        overperforming={overperforming}\n        setOverperforming={setOverperforming}\n        features={features}\n        setFeatures={setFeatures}\n        view={view}\n        radius={radius}\n        setRadius={setRadius}\n        edgeFiltering={edgeFiltering}\n        setEdgeFiltering={setEdgeFiltering}\n        edgeForce={edgeForce}\n        setEdgeForce={setEdgeForce}\n        cursorMode={cursorMode}\n        setCursorMode={setCursorMode}\n        showConvexHull={showConvexHull}\n        setShowConvexHull={setShowConvexHull}\n      />\n      <RightDrawer\n        details={details}\n        metric={metric}\n        overperforming={overperforming}\n        view={view}\n        convexHull={showConvexHull}\n      />\n      <Main\n        numFeatures={numFeatures}\n        sampleSize={sampleSize}\n        metric={metric}\n        view={view}\n        sortBy={sortBy}\n        overperforming={overperforming}\n        features={features}\n        radius={radius}\n        edgeFiltering={edgeFiltering}\n        edgeForce={edgeForce}\n        setDetails={setDetailsCallback}\n        cursorMode={cursorMode}\n        algorithm={algorithm}\n        setShowConvexHull={setShowConvexHull}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Nav/Nav.js",[],"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Main/Main.js",[],"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/RightDrawer/RightDrawer.js",[],"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/LeftDrawer/LeftDrawer.js",["49"],"import React from 'react';\nimport Drawer from '@mui/material/Drawer';\nimport Button from '@mui/material/Button';\nimport Slider from '@mui/material/Slider';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Select from '@mui/material/Select';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Divider from '@mui/material/Divider';\nimport Switch from '@mui/material/Switch';\nimport './LeftDrawer.css';\n\nconst LeftDrawer = ({\n  numFeatures,\n  setNumFeatures,\n  sampleSize,\n  setSampleSize,\n  metric,\n  setMetric,\n  sortBy,\n  setSortBy,\n  overperforming,\n  setOverperforming,\n  features,\n  setFeatures,\n  view,\n  radius,\n  setRadius,\n  edgeFiltering,\n  setEdgeFiltering,\n  edgeForce,\n  setEdgeForce,\n  cursorMode,\n  setCursorMode,\n  showConvexHull,\n  setShowConvexHull,\n}) => {\n  const [switchDisabled, setSwitchDisabled] = React.useState(false);\n  const handleFeaturesChange = (event) => {\n    setNumFeatures(event.target.value);\n    setShowConvexHull(false);\n  };\n\n  const handleSizeChange = (event) => {\n    setSampleSize(event.target.value);\n    setShowConvexHull(false);\n  };\n\n  const handleMetricChange = (event) => {\n    setMetric(event.target.value);\n    setShowConvexHull(false);\n  };\n\n  const handleSortByChange = (event) => {\n    setSortBy(event.target.value);\n    setShowConvexHull(false);\n  };\n\n  const handleSwitchChange = (event) => {\n    setOverperforming(event.target.checked);\n    setShowConvexHull(false);\n  };\n\n  const handleCheckboxChange = (event, label) => {\n    if (event.target.checked) {\n      setFeatures([...features, label]);\n    } else {\n      setFeatures(features.filter((feature) => feature !== label));\n    }\n    setShowConvexHull(false);\n  };\n\n  const handleReset = (event) => {\n    setNumFeatures(2);\n    setSampleSize(0);\n    setMetric('Log Loss');\n    setSortBy('metric');\n    setOverperforming(false);\n    setEdgeFiltering(300);\n    setEdgeForce(1);\n    setShowConvexHull(false);\n  };\n\n  return (\n    <Drawer\n      variant=\"permanent\"\n      anchor=\"left\"\n      sx={{\n        display: { xs: 'none', sm: 'block' },\n        '& .MuiDrawer-paper': { boxSizing: 'border-box', width: '15rem' },\n      }}\n    >\n      <div className='left-container'>\n        <h1>Slice Filters</h1>\n        <h2>Number of Features:</h2>\n        <Slider\n          aria-label='Number of Features'\n          defaultValue={2}\n          value={numFeatures}\n          valueLabelDisplay='auto'\n          step={1}\n          marks\n          min={1}\n          max={4}\n          size='small'\n          onChange={handleFeaturesChange}\n        />\n        <h2>Minimum Slice Size:</h2>\n        <Slider\n          size='small'\n          defaultValue={100}\n          aria-label='Small'\n          value={sampleSize}\n          valueLabelDisplay='auto'\n          min={0}\n          max={250}\n          step={10}\n          onChange={handleSizeChange}\n        />\n        {view === 'graph' && (\n          <>\n            <h2>Edge Filtering:</h2>\n            <Slider\n              aria-label='Edge Filtering'\n              defaultValue={300}\n              value={edgeFiltering}\n              valueLabelDisplay='auto'\n              step={10}\n              min={0}\n              max={1000}\n              size='small'\n              onChange={(event) => {\n                setEdgeFiltering(event.target.value);\n                setShowConvexHull(false);\n              }}\n            />\n            <h2>Edge Force Strength:</h2>\n            <Slider\n              aria-label='Edge Force Strength'\n              defaultValue={1}\n              value={edgeForce}\n              valueLabelDisplay='auto'\n              step={0.01}\n              min={0}\n              max={5}\n              size='small'\n              onChange={(event) => {\n                setEdgeForce(event.target.value);\n                setShowConvexHull(false);\n              }}\n            />\n            <h2>Cursor Mode:</h2>\n            <FormControl sx={{ s: 1, minWidth: 175 }}>\n              <InputLabel>Mode:</InputLabel>\n              <Select\n                value={cursorMode}\n                label='Mode'\n                onChange={(event) => {\n                  setCursorMode(event.target.value);\n                  setShowConvexHull(false);\n                }}\n              >\n                <MenuItem value={'drag'}>Drag</MenuItem>\n                <MenuItem value={'select'}>Select</MenuItem>\n              </Select>\n            </FormControl>\n          </>\n        )}\n        {/* <h2>Fairness Metric:</h2>\n        <FormControl sx={{ m: 1, minWidth: 175 }}>\n          <InputLabel id='demo-simple-select-helper-label'>Metric</InputLabel>\n          <Select\n            labelId='demo-simple-select-helper-label'\n            id='demo-simple-select-helper'\n            value={metric}\n            label='Metric'\n            onChange={handleMetricChange}\n          >\n            <MenuItem value={'Log Loss'}>Log Loss</MenuItem>\n            <MenuItem value={'Accuracy'}>Accuracy</MenuItem>\n            <MenuItem value={'Precision'}>Precision</MenuItem>\n            <MenuItem value={'Recall'}>Recall</MenuItem>\n            <MenuItem value={'F1'}>F1</MenuItem>\n          </Select>\n        </FormControl> */}\n        {view === 'bar' ? (\n          <>\n            <h2>Order By:</h2>\n            <FormControl sx={{ m: 1, minWidth: 175 }}>\n              <InputLabel id='demo-simple-select-helper-label'>\n                Order By:\n              </InputLabel>\n              <Select\n                labelId='demo-simple-select-helper-label'\n                id='demo-simple-select-helper'\n                value={sortBy}\n                label='Order By'\n                onChange={handleSortByChange}\n              >\n                <MenuItem value={'metric'}>{metric}</MenuItem>\n                <MenuItem value={'size'}>Sample Size</MenuItem>\n              </Select>\n            </FormControl>\n          </>\n        ) : (\n          <>\n            <h2>Radius Function:</h2>\n            <FormControl sx={{ s: 1, minWidth: 175 }}>\n              <InputLabel>Radius:</InputLabel>\n              <Select\n                value={radius}\n                label='Radius'\n                onChange={(event) => {\n                  setRadius(event.target.value);\n                  setShowConvexHull(false);\n                }}\n              >\n                <MenuItem value={'log'}>Log</MenuItem>\n                <MenuItem value={'sqrt'}>Square Root</MenuItem>\n              </Select>\n            </FormControl>\n            <h2>Show Convex Hull:</h2>\n            <Switch\n              checked={showConvexHull}\n              onChange={(event) => {\n                if (event.target.checked) {\n                  setSwitchDisabled(true);\n                  setTimeout(() => {\n                    setSwitchDisabled(false);\n                  }, 4000);\n                }\n                setShowConvexHull(event.target.checked);\n              }}\n              label='Show Convex Hull'\n              className='switch'\n              disabled={switchDisabled}\n            />\n          </>\n        )}\n        <h2>Overperforming Slices:</h2>\n        <Switch\n          checked={overperforming}\n          onChange={handleSwitchChange}\n          label='Overperforming Slices'\n        />\n        <h2>Select Features:</h2>\n        <FormGroup style={{ marginLeft: '1rem' }}>\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Age'\n            onChange={(event) => handleCheckboxChange(event, 'Age')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Workclass'\n            onChange={(event) => handleCheckboxChange(event, 'Workclass')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Education'\n            onChange={(event) => handleCheckboxChange(event, 'Education')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Education-Num'\n            onChange={(event) => handleCheckboxChange(event, 'Education-Num')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Marital Status'\n            onChange={(event) => handleCheckboxChange(event, 'Marital Status')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Occupation'\n            onChange={(event) => handleCheckboxChange(event, 'Occupation')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Relationship'\n            onChange={(event) => handleCheckboxChange(event, 'Relationship')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Race'\n            onChange={(event) => handleCheckboxChange(event, 'Race')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Sex'\n            onChange={(event) => handleCheckboxChange(event, 'Sex')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Capital Gain'\n            onChange={(event) => handleCheckboxChange(event, 'Capital Gain')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Capital Loss'\n            onChange={(event) => handleCheckboxChange(event, 'Capital Loss')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Hours Per Week'\n            onChange={(event) => handleCheckboxChange(event, 'Hours Per Week')}\n          />\n          <FormControlLabel\n            control={<Checkbox defaultChecked />}\n            label='Country'\n            onChange={(event) => handleCheckboxChange(event, 'Country')}\n          />\n        </FormGroup>\n        <Divider style={{ padding: '1rem' }} />\n        <Button\n          variant='outlined'\n          onClick={handleReset}\n          style={{ marginTop: '1rem' }}\n        >\n          Reset\n        </Button>\n      </div>\n      </Drawer>\n  );\n};\n\nexport default LeftDrawer;\n","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Main/GraphLayout.js",["50","51","52","53"],"import { useD3 } from '../../hooks/useD3';\nimport React, { memo } from 'react';\nimport * as d3 from 'd3';\nimport Switch from '@mui/material/Switch';\nimport './GraphLayout.css';\nimport Button from '@mui/material/Button';\nimport logLossSamples from '../../data/loglosssamples.json';\nimport reverseLogLossSamples from '../../data/reverseloglosssamples.json';\nimport accuracySamples from '../../data/accuracysamples.json';\nimport precisionSamples from '../../data/precisionsamples.json';\nimport commonSamples from '../../data/commonSamples.json';\nimport commonSamplesSliceline from '../../data/commonSamplesSliceline.json';\nimport reverseCommonSamples from '../../data/reverseCommonSamples.json';\n\nfunction GraphLayout({\n  data,\n  degree,\n  metric,\n  model,\n  overperforming,\n  radiusType,\n  edgeFiltering,\n  edgeForce,\n  setDetails,\n  cursorMode,\n  algorithm,\n  setShowConvexHull,\n}) {\n  const margin = { top: 30, right: 30, bottom: 60, left: 85 };\n  const [value, setValue] = React.useState(0);\n  const hulls = Array.from(Array(100).keys());\n  function useForceUpdate() {\n    return () => setValue((value) => value + 1); // update the state to force render\n  }\n  const forceUpdate = useForceUpdate();\n\n  const width = 800;\n  const height = 800;\n\n  const features = [];\n  const groupings = {};\n\n  let samples;\n  let matches = {};\n\n  switch (metric) {\n    case 'Log Loss':\n      if (overperforming) {\n        samples = reverseLogLossSamples;\n        matches = reverseCommonSamples;\n      } else {\n        if (algorithm === 'sliceline') {\n          matches = commonSamplesSliceline;\n        } else {\n          matches = commonSamples;\n        }\n        samples = logLossSamples;\n      }\n      break;\n    case 'Accuracy':\n      if (overperforming) samples = accuracySamples;\n      else samples = accuracySamples;\n      break;\n    case 'Precision':\n      if (overperforming) samples = precisionSamples;\n      else samples = precisionSamples;\n      break;\n    default:\n      if (overperforming) samples = reverseLogLossSamples;\n      else samples = logLossSamples;\n      break;\n  }\n\n  data.forEach((obj) => {\n    obj.classifiers = [];\n    let str = obj.slice;\n    while (str.indexOf(':') !== -1) {\n      let temp = str.substring(0, str.indexOf(':'));\n      obj.classifiers.push(temp);\n      if (!features.includes(temp)) features.push(temp);\n      if (degree === obj.classifiers.length) {\n        if (groupings[obj.classifiers.join(', ')])\n          groupings[obj.classifiers.join(', ')]++;\n        else groupings[obj.classifiers.join(', ')] = 1;\n      }\n      if (str.indexOf(',') !== -1) {\n        str = str.substring(str.indexOf(',') + 2);\n      } else {\n        str = '';\n      }\n    }\n  });\n\n  const groupingsArray = Object.keys(groupings)\n    .map((key) => [key, groupings[key]])\n    .sort((a, b) => b[1] - a[1]);\n\n  const topGroupings = groupingsArray.slice(0, 15);\n\n  const xCenter = [];\n  const yCenter = [];\n\n  const xTickDistance =\n    (width - margin.left - margin.right) / (features.length + 1);\n  const yTickDistance =\n    (height - margin.top - margin.bottom) / (features.length + 2);\n\n  for (let i = 0; i < features.length; i++) {\n    xCenter.push(margin.left + (i + 1) * xTickDistance);\n    yCenter.push(2 * margin.top + (i + 1) * yTickDistance);\n  }\n\n  const x = d3\n    .scaleBand()\n    .domain(features)\n    .rangeRound([margin.left, width - margin.right])\n    .padding(0.1);\n\n  const xAxis = (g) =>\n    g\n      .attr('transform', `translate(0,${height - margin.bottom})`)\n      .call(d3.axisBottom(x).tickSizeOuter(0))\n      .selectAll('text')\n      .attr('transform', 'translate(-10,0)rotate(-45)')\n      .style('text-anchor', 'end');\n\n  const yAxis = (g) =>\n    g\n      .attr('transform', `translate(${margin.left},${30 - margin.bottom})`)\n      .call(d3.axisLeft(x).tickSizeOuter(0))\n      .selectAll('text')\n      .style('text-anchor', 'end');\n\n  const xAxisGrid = (g) =>\n    g\n      .attr('transform', `translate(0,${height - margin.bottom})`)\n      .call(\n        d3\n          .axisBottom(x)\n          .tickSizeOuter(0)\n          .tickSizeInner(-height - margin.top + 2 * margin.bottom)\n      )\n      .style('opacity', 0.1)\n      .selectAll('text')\n      .style('display', 'none');\n  const yAxisGrid = (g) =>\n    g\n      .attr('transform', `translate(${margin.left},${30 - margin.bottom})`)\n      .call(\n        d3\n          .axisLeft(x)\n          .tickSizeOuter(0)\n          .tickSizeInner(-width - margin.right + 2 * margin.left)\n      )\n      .style('opacity', 0.1)\n      .selectAll('text')\n      .style('display', 'none');\n\n  const nodes = data.map((obj) => {\n    return {\n      radius: radiusType === 'log' ? Math.log(obj.size) : Math.sqrt(obj.size),\n      category: obj.degree,\n      xFeature: obj.classifiers[0],\n      yFeature: obj.classifiers[1] ?? obj.classifiers[0],\n      slice: obj.slice,\n      size: obj.size,\n      metric: obj.metric,\n      classifiers: obj.classifiers,\n    };\n  });\n\n  function countCommonSamples(slice1, slice2) {\n    let arr1 = samples[slice1];\n    let arr2 = samples[slice2];\n    if (!arr1 || !arr2) return 0;\n    arr1 = arr1.sort((a, b) => 0.5 - Math.random()).slice(0, 2000);\n    return arr1.filter((sample) => arr2.includes(sample)).length;\n  }\n\n  let links = [];\n  let common = {};\n\n  for (let i = 0; i < nodes.length; i++) {\n    for (let j = i + 1; j < nodes.length; j++) {\n      const count = matches[nodes[i].slice + '-' + nodes[j].slice];\n      // const count = countCommonSamples(nodes[i].slice, nodes[j].slice);\n      // common[nodes[i].slice + '-' + nodes[j].slice] = count;\n      // common[nodes[j].slice + '-' + nodes[i].slice] = count;\n      if (count > edgeFiltering) {\n        links.push({\n          source: i,\n          target: j,\n          sliceSource: nodes[i].slice,\n          sliceTarget: nodes[j].slice,\n          count: count,\n        });\n      }\n    }\n  }\n\n  // console.log(JSON.stringify(common));\n\n  // const links = [];\n  // console.log(JSON.stringify(links));\n\n  const graph = {\n    nodes: nodes,\n    links: links,\n  };\n\n  function clamp(x, lo, hi) {\n    return x < lo ? lo : x > hi ? hi : x;\n  }\n\n  const ref = useD3(\n    (svg) => {\n      let convexHullShowing = false;\n      d3.select('.hull').remove();\n      svg = d3.select('.svg').style('width', '60%').style('height', '60%');\n      let link = svg\n        .selectAll('.link')\n        .attr('class', 'link')\n        .data(graph.links)\n        .join('line')\n        .classed('link', true);\n      const node = svg\n        .selectAll('.node')\n        .data(graph.nodes)\n        .join('circle')\n        .attr('r', function (d) {\n          return d.radius;\n        })\n        .style('fill', function (d) {\n          if (overperforming)\n            return d3.interpolateBlues(Math.abs((d.metric - model) / model));\n          return d3.interpolateReds(Math.abs((d.metric - model) / model));\n        })\n        .classed('node', true)\n        .classed('fixed', (d) => d.fx !== undefined)\n        .on('mouseover', function (event, d) {\n          cursorMode === 'select'\n            ? d3\n                .select(this)\n                .attr('r', d.radius)\n                .style('opacity', '0.7')\n                .style('cursor', 'pointer')\n            : d3\n                .select(this)\n                .attr('r', d.radius)\n                .style('opacity', '0.7')\n                .style('cursor', 'grab');\n          d3.select('.tooltip')\n            .transition()\n            .duration(200)\n            .style('opacity', 0.9)\n            .style(\n              'left',\n              Math.min(Math.max(200, d.x), width - 200) + 100 + 'px'\n            )\n            .style('top', Math.min(height - 200, Math.max(0, d.y)) + 'px');\n          d3.select('.tooltip').html(\n            '<strong>Slice Description: </strong>' +\n              '<br><div style={{margin: \"1rem\"}}> </div>' +\n              d.slice +\n              '<br>' +\n              '<strong>Size: </strong>' +\n              '<br>' +\n              d.size +\n              ' samples' +\n              '<br>' +\n              '<strong>' +\n              metric +\n              ': ' +\n              '</strong>' +\n              '<br>' +\n              d.metric.toFixed(2) +\n              '<br>' +\n              `(${Math.round(((d.metric - model) / model) * 100)}% difference)`\n          );\n        })\n        .on('mouseout', function (d, i) {\n          d3.select(this).attr('r', i.radius).style('opacity', '1');\n          d3.select('.tooltip')\n            .transition()\n            .style('opacity', 0)\n            .style('left', width + 'px')\n            .style('top', 0 + 'px');\n        })\n        .on('click', click);\n\n      const simulation = d3\n        .forceSimulation()\n        .nodes(graph.nodes)\n        .force('charge', d3.forceManyBody().strength(-5))\n        // .force('center', d3.forceCenter(width / 2, height / 2).strength(0.1))\n        .force(\n          'x',\n          d3.forceX().x(function (d) {\n            return xCenter[features.indexOf(d.xFeature)];\n          })\n        )\n        .force(\n          'y',\n          d3.forceY().y(function (d) {\n            if (degree > 1) {\n              return yCenter[features.indexOf(d.yFeature)];\n            } else {\n              return height / 2;\n            }\n          })\n        )\n        .force(\n          'link',\n          d3.forceLink(graph.links).strength((d) => {\n            return (d.count / 10000) * edgeForce;\n          })\n        )\n        .force(\n          'collision',\n          d3.forceCollide().radius(function (d) {\n            return d.radius;\n          })\n        )\n        .on('tick', tick);\n      if (cursorMode === 'drag') {\n        const drag = d3.drag().on('start', dragstart).on('drag', dragged);\n\n        node.call(drag).on('click', click);\n      }\n\n      function tick() {\n        link\n          .attr('x1', (d) =>\n            Math.max(Math.min(d.source.x, width), d.source.radius + 100)\n          )\n          .attr('y1', (d) =>\n            Math.max(Math.min(d.source.y, height - 75), d.source.radius)\n          )\n          .attr('x2', (d) =>\n            Math.max(Math.min(d.target.x, width), d.target.radius + 100)\n          )\n          .attr('y2', (d) =>\n            Math.max(Math.min(d.target.y, height - 75), d.target.radius)\n          )\n          .style('stroke-width', (d) =>\n            Math.min(\n              Math.pow(d.count / 2000, 2) * edgeForce,\n              Math.pow(d.count / 2000, 2) * 3\n            )\n          );\n        node\n          .attr('cx', (d) => Math.max(Math.min(d.x, width), d.radius + 100))\n          .attr('cy', (d) => Math.max(Math.min(d.y, height - 75), d.radius));\n      }\n\n      function click(event, d) {\n        if (cursorMode === 'select') {\n          node.style('fill', function (d) {\n            if (event.target.__data__ === d) {\n              return d3.interpolateGreys(0.5);\n            }\n            if (overperforming)\n              return d3.interpolateBlues(Math.abs((d.metric - model) / model));\n            return d3.interpolateReds(Math.abs((d.metric - model) / model));\n          });\n          setDetails({\n            slice: d.slice,\n            size: d.size,\n            metric: d.metric,\n            similarSlices: links\n              .sort((a, b) => b.count - a.count)\n              .map((link) => {\n                if (\n                  link.count > edgeFiltering &&\n                  link.sliceSource === d.slice\n                ) {\n                  return link.sliceTarget;\n                } else if (\n                  link.count > edgeFiltering &&\n                  link.sliceTarget === d.slice\n                ) {\n                  return link.sliceSource;\n                }\n                return undefined;\n              })\n              .filter((link) => link !== undefined)\n              .slice(0, 10),\n          });\n        } else {\n          delete d.fx;\n          delete d.fy;\n          d3.select(this).classed('fixed', false);\n          d3.select(this).style('fill', () => {\n            if (overperforming)\n              return d3.interpolateBlues(Math.abs((d.metric - model) / model));\n            return d3.interpolateReds(Math.abs((d.metric - model) / model));\n          });\n          simulation.alpha(1).restart();\n        }\n      }\n\n      function dragstart(event, d) {\n        d3.select(this).classed('fixed', true);\n        d3.select(this).style('fill', '#FFD600');\n        setDetails({\n          slice: d.slice,\n          size: d.size,\n          metric: d.metric,\n          similarSlices: links\n            .sort((a, b) => b.count - a.count)\n            .map((link) => {\n              if (link.count > edgeFiltering && link.sliceSource === d.slice) {\n                return link.sliceTarget;\n              } else if (\n                link.count > edgeFiltering &&\n                link.sliceTarget === d.slice\n              ) {\n                return link.sliceSource;\n              }\n              return undefined;\n            })\n            .filter((link) => link !== undefined)\n            .slice(0, 10),\n        });\n      }\n\n      function dragged(event, d) {\n        d.fx = clamp(event.x, 0, width);\n        d.fy = clamp(event.y, 0, height);\n        simulation.alpha(1).restart();\n      }\n\n      const convexHull = (g, opacity) => {\n        const colors = [\n          'gray',\n          'green',\n          'yellow',\n          'black',\n          'purple',\n          'pink',\n          'red',\n          'orange',\n          'brown',\n          'blue',\n          'cyan',\n          'magenta',\n          'lime',\n          'navy',\n          'olive',\n          'teal',\n          'violet',\n          'wheat',\n        ];\n        let vertices = [];\n\n        for (let i = 0; i < topGroupings.length; i++) {\n          vertices = [];\n          for (let j = 0; j < nodes.length; j++) {\n            if (\n              nodes[j].xFeature === topGroupings[i][0].split(', ')[0] &&\n              (degree < 2 ||\n                nodes[j].yFeature === topGroupings[i][0].split(', ')[1])\n            ) {\n              if (degree < 2) {\n                vertices.push([nodes[j].x, height / 2]);\n              } else {\n                vertices.push([nodes[j].x, nodes[j].y]);\n              }\n            }\n          }\n          const hull = d3.polygonHull(vertices);\n          const line = d3.line().curve(d3.curveLinearClosed);\n          if (!hull) return;\n          g.append('path')\n            .attr('class', `path${degree}`)\n            .attr('d', line(hull))\n            .attr('fill', colors[0])\n            .attr('stroke', colors[0])\n            .attr('opacity', opacity);\n        }\n      };\n\n      svg.select('.x-axis-grid').call(xAxisGrid);\n      svg.select('.y-axis-grid').call(yAxisGrid);\n      svg.select('.x-axis').call(xAxis);\n      if (degree >= 2) {\n        svg.select('.y-axis').call(yAxis).style('opacity', '1');\n      } else {\n        svg.select('.y-axis').style('opacity', '0');\n      }\n      d3.select('.switch').on('click', (event, d) => {\n        setShowConvexHull(event.target.checked);\n        convexHullShowing = event.target.checked;\n        if (convexHullShowing)\n          d3.select(`.hull`)\n            .style('opacity', '0')\n            .call(convexHull, 0.25)\n            .transition()\n            .duration(500)\n            .style('opacity', '1');\n        else {\n          d3.select('.hull').remove();\n          d3.selectAll('.hull').transition().duration(0).style('opacity', '0');\n        }\n      });\n    },\n    [data, value]\n  );\n\n  return (\n    <div className='container' style={{ overflow: 'scroll' }}>\n      <div\n        className='tooltip'\n        style={{\n          position: 'absolute',\n          background: '#e6e6e6',\n          borderRadius: '0.5rem',\n          padding: '0.5rem',\n        }}\n      ></div>\n      <svg className='svg' width={width} height={height}>\n        <g transform='translate(50, 200)'></g>\n        <g className='x-axis' />\n        <g className='y-axis' />\n        <g className='x-axis-grid' />\n        <g className='y-axis-grid' />\n        {hulls.map((hull) => (\n          <g className={'hull'} key={hull} />\n        ))}\n      </svg>\n      <br />\n      <Button\n        variant='outlined'\n        onClick={forceUpdate}\n        style={{ margin: '1rem' }}\n      >\n        Recenter\n      </Button>\n    </div>\n  );\n}\n\nexport default memo(GraphLayout);\n","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Main/SliceBarChart.js",[],"/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/components/Main/ForceLayout.js",["54","55"],"import { useD3 } from '../../hooks/useD3';\nimport React, { memo } from 'react';\nimport * as d3 from 'd3';\nimport './ForceLayout.css';\n\nfunction ForceLayout({\n  data,\n  degree,\n  view,\n  metric,\n  model,\n  overperforming,\n  setDetails,\n  radius,\n  setShowConvexHull,\n}) {\n  const margin = { top: 20, right: 30, bottom: 70, left: 85 };\n  const width = 800;\n  const height = 800;\n  const hulls = Array.from(Array(100).keys());\n\n  const features = [];\n  const groupings = {};\n\n  data.forEach((obj) => {\n    obj.classifiers = [];\n    let str = obj.slice;\n    while (str.indexOf(':') !== -1) {\n      let temp = str.substring(0, str.indexOf(':'));\n      obj.classifiers.push(temp);\n      if (!features.includes(temp)) features.push(temp);\n      if (degree === obj.classifiers.length) {\n        if (groupings[obj.classifiers.join(', ')])\n          groupings[obj.classifiers.join(', ')]++;\n        else groupings[obj.classifiers.join(', ')] = 1;\n      }\n      if (str.indexOf(',') !== -1) {\n        str = str.substring(str.indexOf(',') + 2);\n      } else {\n        str = '';\n      }\n    }\n  });\n\n  const groupingsArray = Object.keys(groupings)\n    .map((key) => [key, groupings[key]])\n    .sort((a, b) => b[1] - a[1]);\n\n  const topGroupings = groupingsArray.slice(0, 15);\n\n  const x = d3\n    .scaleBand()\n    .domain(features)\n    .rangeRound([margin.left, width - margin.right])\n    .padding(0.1);\n\n  const xAxis = (g) =>\n    g\n      .attr('transform', `translate(0,${height - margin.bottom})`)\n      .call(d3.axisBottom(x).tickSizeOuter(0))\n      .selectAll('text')\n      .attr('transform', 'translate(-10,0)rotate(-45)')\n      .style('text-anchor', 'end');\n\n  const yAxis = (g) =>\n    g\n      .attr('transform', `translate(${margin.left},${30 - margin.bottom})`)\n      .call(d3.axisLeft(x).tickSizeOuter(0))\n      .selectAll('text')\n      .style('text-anchor', 'end');\n\n  const xAxisGrid = (g) =>\n    g\n      .attr('transform', `translate(0,${height - margin.bottom})`)\n      .call(\n        d3\n          .axisBottom(x)\n          .tickSizeOuter(0)\n          .tickSizeInner(-height - margin.top + 2 * margin.bottom)\n      )\n      .style('opacity', 0.1)\n      .selectAll('text')\n      .style('display', 'none');\n\n  const yAxisGrid = (g) =>\n    g\n      .attr('transform', `translate(${margin.left},${30 - margin.bottom})`)\n      .call(\n        d3\n          .axisLeft(x)\n          .tickSizeOuter(0)\n          .tickSizeInner(-width - margin.right + 2 * margin.left)\n      )\n      .style('opacity', 0.1)\n      .selectAll('text')\n      .style('display', 'none');\n\n  const ref = useD3(\n    (svg) => {\n      let convexHullShowing = false;\n      d3.select('.hull').remove();\n      let div = d3\n        .select('.tooltip')\n        .style('opacity', 0)\n        .style('width', '200px')\n        .style('height', '150px')\n        .style('padding', '1rem 0.5rem 0 0.5rem')\n        .style('border-radius', '20px');\n      const xCenter = [];\n      const yCenter = [];\n      for (let i = 0; i < features.length; i++) {\n        xCenter.push(((width - 150) / features.length) * i + 100);\n        yCenter.push(((height - 175) / features.length) * i - 100);\n      }\n      const nodes = data.map((obj) => {\n        return {\n          radius: radius === 'log' ? Math.log(obj.size) : Math.sqrt(obj.size),\n          category: obj.degree,\n          xFeature: obj.classifiers[0],\n          yFeature: obj.classifiers[1] ?? obj.classifiers[0],\n          slice: obj.slice,\n          size: obj.size,\n          metric: obj.metric,\n        };\n      });\n\n      const simulation = d3\n        .forceSimulation(nodes)\n        .force('charge', d3.forceManyBody().strength(-5))\n        .force(\n          'x',\n          d3.forceX().x(function (d) {\n            return xCenter[features.indexOf(d.xFeature)] - 20;\n          })\n        )\n        .force(\n          'y',\n          d3.forceY().y(function (d) {\n            if (degree > 1) {\n              return yCenter[features.indexOf(d.yFeature)];\n            } else {\n              return height / 4;\n            }\n          })\n        )\n        .force(\n          'collision',\n          d3.forceCollide().radius(function (d) {\n            return d.radius;\n          })\n        )\n        .on('tick', ticked);\n\n      let bubbles = d3\n        .select('.g')\n        .selectAll('circle')\n        .data(nodes)\n        .join('circle')\n        .attr('class', 'node')\n        .attr('r', function (d) {\n          return d.radius;\n        })\n        .style('fill', function (d) {\n          if (overperforming)\n            return d3.interpolateBlues(Math.abs((d.metric - model) / model));\n          return d3.interpolateReds(Math.abs((d.metric - model) / model));\n        })\n        .style('opacity', function (d) {\n          return '1';\n        });\n      function ticked() {\n        bubbles\n          .attr('cx', function (d) {\n            return d.x;\n          })\n          .attr('cy', function (d) {\n            return d.y;\n          })\n          .on('mouseover', function (event, d) {\n            d3.select(this)\n              .attr('r', d.radius * 1.1)\n              .style('opacity', '0.7')\n              .style('cursor', 'pointer');\n            div\n              .transition()\n              .duration(200)\n              .style('opacity', 0.9)\n              .style(\n                'left',\n                (d.x < 0.75 * width ? width / 2 + d.x : d.x + width / 4) + 'px'\n              )\n              .style('top', height / 5 + d.y + 'px');\n            div.html(\n              '<strong>Slice Description: </strong>' +\n                '<br><div style={{margin: \"1rem\"}}> </div>' +\n                d.slice +\n                '<br>' +\n                '<strong>Size: </strong>' +\n                '<br>' +\n                d.size +\n                ' samples' +\n                '<br>' +\n                '<strong>' +\n                metric +\n                ': ' +\n                '</strong>' +\n                '<br>' +\n                d.metric.toFixed(2) +\n                '<br>' +\n                `(${Math.round(\n                  ((d.metric - model) / model) * 100\n                )}% difference)`\n            );\n          })\n          .on('mouseout', function (event, d) {\n            d3.select(this).attr('r', d.radius).style('opacity', '1');\n            div\n              .transition()\n              .style('opacity', 0)\n              .style('left', width + 'px')\n              .style('top', 0 + 'px');\n          })\n          .on('click', function (event, d) {\n            bubbles.style('fill', function (d) {\n              if (event.target.__data__ === d) {\n                return \"#FFD600\"\n              }\n              if (overperforming)\n                return d3.interpolateBlues(\n                  Math.abs((d.metric - model) / model)\n                );\n              return d3.interpolateReds(Math.abs((d.metric - model) / model));\n            });\n            setDetails({\n              slice: d.slice,\n              size: d.size,\n              metric: d.metric,\n              similarSlices: [],\n            });\n          });\n      }\n\n      const convexHull = (g, opacity) => {\n        const colors = ['gray', 'green', 'yellow', 'black', 'purple'];\n        let vertices = [];\n\n        for (let i = 0; i < topGroupings.length; i++) {\n          vertices = [];\n          for (let j = 0; j < nodes.length; j++) {\n            if (\n              nodes[j].xFeature === topGroupings[i][0].split(', ')[0] &&\n              (degree < 2 ||\n                nodes[j].yFeature === topGroupings[i][0].split(', ')[1])\n            ) {\n              if (degree < 2) {\n                vertices.push([nodes[j].x + 50, height / 2]);\n              } else {\n                vertices.push([nodes[j].x + 50, nodes[j].y + 200]);\n              }\n            }\n          }\n          const hull = d3.polygonHull(vertices);\n          const line = d3.line().curve(d3.curveLinearClosed);\n          if (!hull) return;\n          g.append('path')\n            .attr('class', `path${degree}`)\n            .attr('d', line(hull))\n            .attr('fill', colors[0])\n            .attr('stroke', colors[0])\n            .attr('opacity', opacity);\n        }\n      };\n\n      d3.select('.x-axis-grid').call(xAxisGrid);\n      d3.select('.y-axis-grid').call(yAxisGrid);\n      d3.select('.x-axis').call(xAxis);\n      if (degree >= 2) {\n        d3.select('.y-axis').call(yAxis).style('opacity', '1');\n      } else {\n        d3.select('.y-axis').style('opacity', '0');\n      }\n      d3.select('.switch').on('click', (event, d) => {\n        setShowConvexHull(event.target.checked);\n        convexHullShowing = event.target.checked;\n        if (convexHullShowing)\n          d3.select(`.hull`)\n            .style('opacity', '0')\n            .call(convexHull, 0.25)\n            .transition()\n            .duration(500)\n            .style('opacity', '1');\n        else {\n          d3.select(`.hull`).remove();\n          d3.selectAll(`.hull`).transition().duration(0).style('opacity', '0');\n        }\n      });\n    },\n    [data, view]\n  );\n\n  if (view !== 'force') return null;\n\n  return (\n    <div className='force'>\n      <div\n        className='tooltip'\n        style={{ position: 'absolute', background: '#e6e6e6' }}\n      ></div>\n      <svg width={width} height={height} id='force-svg' className='svg'>\n        <g id='force-g' className='g' transform='translate(50, 200)'></g>\n        <g className='x-axis' />\n        <g className='y-axis' />\n        <g className='x-axis-grid' />\n        <g className='y-axis-grid' />\n        {/* <g className='hull1' />\n        <g className='hull2' /> */}\n        {hulls.map((hull) => (\n          <g className={'hull'} key={hull} />\n        ))}\n      </svg>\n    </div>\n  );\n}\n\nexport default memo(ForceLayout);\n","/Users/davidmunechika/Documents/Code/Research/visual-auditor/visual-auditor-app/src/hooks/useD3.js",["56","57"],"import React from 'react';\nimport * as d3 from 'd3';\n\nexport const useD3 = (renderChartFn, dependencies) => {\n  const ref = React.useRef();\n\n  React.useEffect(() => {\n    renderChartFn(d3.select(ref.current));\n    return () => {};\n  }, dependencies);\n  return ref;\n};\n",{"ruleId":"58","severity":1,"message":"59","line":21,"column":10,"nodeType":"60","messageId":"61","endLine":21,"endColumn":23},{"ruleId":"58","severity":1,"message":"62","line":21,"column":25,"nodeType":"60","messageId":"61","endLine":21,"endColumn":41},{"ruleId":"58","severity":1,"message":"63","line":52,"column":9,"nodeType":"60","messageId":"61","endLine":52,"endColumn":27},{"ruleId":"58","severity":1,"message":"64","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":14},{"ruleId":"58","severity":1,"message":"65","line":172,"column":12,"nodeType":"60","messageId":"61","endLine":172,"endColumn":30},{"ruleId":"58","severity":1,"message":"66","line":181,"column":7,"nodeType":"60","messageId":"61","endLine":181,"endColumn":13},{"ruleId":"58","severity":1,"message":"67","line":215,"column":9,"nodeType":"60","messageId":"61","endLine":215,"endColumn":12},{"ruleId":"58","severity":1,"message":"67","line":98,"column":9,"nodeType":"60","messageId":"61","endLine":98,"endColumn":12},{"ruleId":"58","severity":1,"message":"68","line":127,"column":13,"nodeType":"60","messageId":"61","endLine":127,"endColumn":23},{"ruleId":"69","severity":1,"message":"70","line":10,"column":6,"nodeType":"60","endLine":10,"endColumn":18},{"ruleId":"69","severity":1,"message":"71","line":10,"column":6,"nodeType":"60","endLine":10,"endColumn":18,"suggestions":"72"},"no-unused-vars","'edgeThickness' is assigned a value but never used.","Identifier","unusedVar","'setEdgeThickness' is assigned a value but never used.","'handleMetricChange' is assigned a value but never used.","'Switch' is defined but never used.","'countCommonSamples' is defined but never used.","'common' is assigned a value but never used.","'ref' is assigned a value but never used.","'simulation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","React Hook React.useEffect has a missing dependency: 'renderChartFn'. Either include it or remove the dependency array. If 'renderChartFn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["73"],{"desc":"74","fix":"75"},"Update the dependencies array to be: [renderChartFn]",{"range":"76","text":"77"},[236,248],"[renderChartFn]"]